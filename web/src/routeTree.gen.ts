/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersImport } from './routes/users'
import { Route as ProfileImport } from './routes/profile'
import { Route as IndexImport } from './routes/index'
import { Route as TemplatesIndexImport } from './routes/templates/index'
import { Route as ProjectsIndexImport } from './routes/projects/index'
import { Route as TemplatesTemplateIdImport } from './routes/templates/$templateId'
import { Route as ProjectsProjectIdImport } from './routes/projects/$projectId'

// Create/Update Routes

const UsersRoute = UsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TemplatesIndexRoute = TemplatesIndexImport.update({
  id: '/templates/',
  path: '/templates/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsIndexRoute = ProjectsIndexImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any)

const TemplatesTemplateIdRoute = TemplatesTemplateIdImport.update({
  id: '/templates/$templateId',
  path: '/templates/$templateId',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdRoute = ProjectsProjectIdImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdImport
      parentRoute: typeof rootRoute
    }
    '/templates/$templateId': {
      id: '/templates/$templateId'
      path: '/templates/$templateId'
      fullPath: '/templates/$templateId'
      preLoaderRoute: typeof TemplatesTemplateIdImport
      parentRoute: typeof rootRoute
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexImport
      parentRoute: typeof rootRoute
    }
    '/templates/': {
      id: '/templates/'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof TemplatesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRoute
  '/users': typeof UsersRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/templates/$templateId': typeof TemplatesTemplateIdRoute
  '/projects': typeof ProjectsIndexRoute
  '/templates': typeof TemplatesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRoute
  '/users': typeof UsersRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/templates/$templateId': typeof TemplatesTemplateIdRoute
  '/projects': typeof ProjectsIndexRoute
  '/templates': typeof TemplatesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/profile': typeof ProfileRoute
  '/users': typeof UsersRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/templates/$templateId': typeof TemplatesTemplateIdRoute
  '/projects/': typeof ProjectsIndexRoute
  '/templates/': typeof TemplatesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/profile'
    | '/users'
    | '/projects/$projectId'
    | '/templates/$templateId'
    | '/projects'
    | '/templates'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/profile'
    | '/users'
    | '/projects/$projectId'
    | '/templates/$templateId'
    | '/projects'
    | '/templates'
  id:
    | '__root__'
    | '/'
    | '/profile'
    | '/users'
    | '/projects/$projectId'
    | '/templates/$templateId'
    | '/projects/'
    | '/templates/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProfileRoute: typeof ProfileRoute
  UsersRoute: typeof UsersRoute
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRoute
  TemplatesTemplateIdRoute: typeof TemplatesTemplateIdRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  TemplatesIndexRoute: typeof TemplatesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProfileRoute: ProfileRoute,
  UsersRoute: UsersRoute,
  ProjectsProjectIdRoute: ProjectsProjectIdRoute,
  TemplatesTemplateIdRoute: TemplatesTemplateIdRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  TemplatesIndexRoute: TemplatesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/profile",
        "/users",
        "/projects/$projectId",
        "/templates/$templateId",
        "/projects/",
        "/templates/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/users": {
      "filePath": "users.tsx"
    },
    "/projects/$projectId": {
      "filePath": "projects/$projectId.tsx"
    },
    "/templates/$templateId": {
      "filePath": "templates/$templateId.tsx"
    },
    "/projects/": {
      "filePath": "projects/index.tsx"
    },
    "/templates/": {
      "filePath": "templates/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
