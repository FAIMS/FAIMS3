update_fastlane

default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
BROWSERSTACK_USERNAME = ENV["BROWSERSTACK_USERNAME"]
BROWSERSTACK_ACCESS_KEY = ENV["BROWSERSTACK_ACCESS_KEY"]
def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  lane :test_ipa do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      duration: 1200,
      in_house: false
    )

    #increment_build_number(xcodeproj: "App.xcodeproj")
    #handled by script and xcode in build phases, I hope.

    cocoapods(
      clean_install: true
    )

    match(
      type: 'development',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
      readonly: false,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Debug",
      workspace: "App.xcworkspace",
      scheme: "App",
      export_method: "development",
      export_options: {
        provisioningProfiles: {
            DEVELOPER_APP_ID => "match Development #{DEVELOPER_APP_IDENTIFIER}"
        }
      }
    )
  end
  lane :closed_beta_browserstack do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      duration: 1200,
      in_house: false
    )

    #increment_build_number(xcodeproj: "App.xcodeproj")
    #handled by script and xcode in build phases, I hope.

    cocoapods(
      clean_install: true
    )

    match(
      type: 'development',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
      readonly: false,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Debug",
      workspace: "App.xcworkspace",
      scheme: "App",
      export_method: "development",
      export_options: {
        provisioningProfiles: {
            DEVELOPER_APP_ID => "match Development #{DEVELOPER_APP_IDENTIFIER}"
        }
      }
    )

    upload_to_browserstack_app_automate(
      browserstack_username: "#{BROWSERSTACK_USERNAME}",
      browserstack_access_key: "#{BROWSERSTACK_ACCESS_KEY}",
      custom_id: "ios-github-actions-fastlane"
    )
  end
  lane :closed_beta_testflight do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      duration: 1200,
      in_house: false
    )

    #increment_build_number(xcodeproj: "App.xcodeproj")
    #handled by script and xcode in build phases, I hope.

    cocoapods(
      clean_install: true
    )

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
      readonly: false,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Release", #make sure this key matches xcode signing and capabilities.
      workspace: "App.xcworkspace",
      scheme: "App",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
            DEVELOPER_APP_ID => "match AppStore #{DEVELOPER_APP_IDENTIFIER}"
            # AppStore needs app-store. Browserstack needs development
        }
      }
    )
    changelog = changelog_from_git_commits(
      match_lightweight_tag: false,
      merge_commit_filtering: "exclude_merges"
    )


    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: false,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "App.ipa",
      changelog: changelog
    )

    delete_temp_keychain(keychain_name)
  end

  lane :production do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      duration: 1200,
      in_house: false
    )

    #increment_build_number(xcodeproj: "App.xcodeproj")
    #handled by script and xcode in build phases, I hope.

    cocoapods(
      clean_install: true
    )

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]),
      readonly: false,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Release", #make sure this key matches xcode signing and capabilities.
      workspace: "App.xcworkspace",
      scheme: "App",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
            DEVELOPER_APP_ID => "match AppStore #{DEVELOPER_APP_IDENTIFIER}"
            # AppStore needs app-store. Browserstack needs development
        }
      }
    )

    deliver(
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      ipa: "App.ipa",
      submit_for_review: false,
      automatic_release: false,
      force: true,
      run_precheck_before_submit: false
    )

    delete_temp_keychain(keychain_name)
  end
end
