---
# Nightly compile for e2e testing
name: Nightly mobile builds for humans
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  # push:
  #   branches:
  #     - github-actions
  #     - main

  workflow_dispatch:

  schedule:
    - cron: '39 20 * * 2-6'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_date:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false"
  node-deb-android-job-for-dev:
    # The type of runner that the job will run on
    # https://github.com/Apple-Actions/Example-iOS/blob/master/.github/workflows/test.yml
    runs-on: ubuntu-latest
    needs: check_date
    continue-on-error: true
    strategy:
      matrix:
        node-version: ['lts/*']
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-java-with-gradle
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}            
          cache: 'npm'
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-java-with-gradle
      - name: Set up JDK 1.11
        uses: actions/setup-java@v3
        with:
          java-version: 1.11
      # https://github.com/android-actions/setup-android
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - name: Building webapp
        run: |
          export REACT_APP_CLUSTER_ADMIN_GROUP_NAME=cluster-admin
          export REACT_APP_COMMIT_VERSION=$(bin/getDescribeString.sh android)
          export REACT_APP_DEBUG_APP=true
          export REACT_APP_DEBUG_POUCHDB=false
          export REACT_APP_USE_HTTPS=true
          export REACT_APP_SHOW_WIPE=true
          export REACT_APP_SHOW_NEW_NOTEBOOK=true
          export REACT_APP_SHOW_MINIFAUXTON=true
          export REACT_APP_DIRECTORY_HOST=dev.db.faims.edu.au
          export REACT_APP_DIRECTORY_PORT=443
          export REACT_APP_PRODUCTION_BUILD=true          
          export REACT_APP_SERVICES=FAIMSTEXT
          export REACT_APP_TAG=testingAndroid          
          export REACT_APP_PROD_BUILD=true
          export platform="github-actions-android"
          export serverprefix="dev"
          git clean -xfd
          npm ci
          npm run build
      # https://capacitorjs.com/docs/android
      - run: npx cap sync --deployment android
      - run: cd android && ./gradlew assembleDebug
      - run: cp "$(find . -name '*.apk')" .
      - name: Archive apks
        uses: actions/upload-artifact@v2
        with:
          name: apks
          path: |
            ./*.apk
      # - uses: "marvinpinto/action-automatic-releases@latest"
      #   with:
      #     repo_token: "${{ secrets.GITHUB_TOKEN }}"
      #     automatic_release_tag: "latest-android"
      #     prerelease: true
      #     title: "Android APK Development Build"
      #     files: |
      #       LICENSE
      #       *.apk
  node-deb-android-job-for-testing:
    # The type of runner that the job will run on
    # https://github.com/Apple-Actions/Example-iOS/blob/master/.github/workflows/test.yml
    runs-on: ubuntu-latest
    needs: check_date
    continue-on-error: true
    strategy:
      matrix:
        node-version: ['lts/*']
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-java-with-gradle
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}            
          cache: 'npm'
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-java-with-gradle
      - name: Set up JDK 1.11
        uses: actions/setup-java@v3
        with:
          java-version: 1.11
      # https://github.com/android-actions/setup-android
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - name: Building webapp
        run: |
          export REACT_APP_CLUSTER_ADMIN_GROUP_NAME=cluster-admin
          export REACT_APP_COMMIT_VERSION=$(bin/getDescribeString.sh android)
          export REACT_APP_DEBUG_APP=true
          export REACT_APP_DEBUG_POUCHDB=false
          export REACT_APP_USE_HTTPS=true
          export REACT_APP_SHOW_WIPE=true
          export REACT_APP_SHOW_NEW_NOTEBOOK=true
          export REACT_APP_SHOW_MINIFAUXTON=true
          export REACT_APP_DIRECTORY_HOST=testing.db.faims.edu.au
          export REACT_APP_DIRECTORY_PORT=443
          export REACT_APP_PRODUCTION_BUILD=true          
          export REACT_APP_SERVICES=FAIMSTEXT
          export REACT_APP_TAG=testingAndroid          
          export REACT_APP_PROD_BUILD=true
          export platform="github-actions-android"
          export serverprefix="testing"
          git clean -xfd
          npm ci
          npm run build
      # https://capacitorjs.com/docs/android
      - run: npx cap sync --deployment android
      - run: cd android && ./gradlew assembleDebug
      - run: cp "$(find . -name '*.apk')" .
      - name: Archive apks
        uses: actions/upload-artifact@v2
        with:
          name: apks
          path: |
            ./*.apk
      # - uses: "marvinpinto/action-automatic-releases@latest"
      #   with:
      #     repo_token: "${{ secrets.GITHUB_TOKEN }}"
      #     automatic_release_tag: "latest-android"
      #     prerelease: true
      #     title: "Android APK Development Build"
      #     files: |
      #       LICENSE
      #       *.apk            
  ios-deploy:
    name: Deploying to Testflight
    runs-on: macOS-latest
    needs: check_date
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0.2'
          # bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - run: |
          bundle install # to get cocoapods...   
      - run: fastlane install_plugins
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}            
          cache: 'npm'
      - name: Building webapp
        run: |
          export REACT_APP_PRODUCTION_BUILD=true
          export REACT_APP_DIRECTORY_HOST=dev.db.faims.edu.au
          export REACT_APP_COMMIT_VERSION=$(bin/getDescribeString.sh ios)
          export REACT_APP_SERVER=production
          export REACT_APP_SERVICES=FAIMSTEXT
          export REACT_APP_TAG=testingAndroid
          export REACT_APP_USE_REAL_DATA=true
          export REACT_APP_PROD_BUILD=true
          export platform="github-actions-ios"
          export serverprefix="dev"
          git clean -xfd
          npm ci
          npm run build
      # https://capacitorjs.com/docs/android
      - run: npx cap update ios
      - run: npx cap sync --deployment ios
      - run: cd ios/App; pod install
      - run: chmod -R 777 /Users/runner/hostedtoolcache/Ruby/3.0.2/x64/lib/ruby/gems/
      - name: Deploy iOS Beta to TestFlight via Fastlane
        uses: maierj/fastlane-action@v2.1.0
        with:
          lane: closed_beta_testflight
          subdirectory: 'ios/App'
          bundle-install-path: '$HOME/vendor/bundle'
          verbose: false
        env:
          APP_STORE_CONNECT_TEAM_ID: '${{ secrets.APP_STORE_CONNECT_TEAM_ID }}'
          DEVELOPER_APP_ID: '${{ secrets.DEVELOPER_APP_ID }}'
          DEVELOPER_APP_IDENTIFIER: '${{ secrets.DEVELOPER_APP_IDENTIFIER }}'
          DEVELOPER_PORTAL_TEAM_ID: '${{ secrets.DEVELOPER_PORTAL_TEAM_ID }}'
          FASTLANE_APPLE_ID: '${{ secrets.FASTLANE_APPLE_ID }}'
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: '${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}'
          MATCH_PASSWORD: '${{ secrets.MATCH_PASSWORD }}'
          GIT_AUTHORIZATION: '${{ secrets.GIT_AUTHORIZATION }}'
          PROVISIONING_PROFILE_SPECIFIER: '${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}'
          TEMP_KEYCHAIN_PASSWORD: '${{ secrets.TEMP_KEYCHAIN_PASSWORD }}'
          TEMP_KEYCHAIN_USER: '${{ secrets.TEMP_KEYCHAIN_USER }}'
          APPLE_KEY_ID: '${{ secrets.APPLE_KEY_ID }}'
          APPLE_ISSUER_ID: '${{ secrets.APPLE_ISSUER_ID }}'
          APPLE_KEY_CONTENT: '${{ secrets.APPLE_KEY_CONTENT }}'
          BROWSERSTACK_USERNAME: '${{secrets.BROWSERSTACK_USERNAME}}'
          BROWSERSTACK_ACCESS_KEY: '${{secrets.BROWSERSTACK_ACCESS_KEY}}'
      - name: Archive ipas
        uses: actions/upload-artifact@v2
        with:
          name: ipa
          path: |
            /Users/runner/work/FAIMS3/FAIMS3/ios/App/App.ipa