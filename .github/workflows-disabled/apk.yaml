
# This is a basic workflow to help you get started with Actions

name: Compile APK, Electron, and Test on BrowserStack

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on: [push, pull_request]


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  node-deb-android-job:
    # The type of runner that the job will run on
    # https://github.com/Apple-Actions/Example-iOS/blob/master/.github/workflows/test.yml
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-java-with-gradle
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}            
     

      # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-java-with-gradle
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # https://github.com/android-actions/setup-android
      - name: Setup Android SDK
        uses: FAIMS/setup-android@v2.1.0-prerelease

      
      - run: npm install
      - run: npm run build
      # https://capacitorjs.com/docs/android
      
      - run: npx cap sync android
      
      # build local deb
      - run: npm run dist
      - run: cp "$(find . -name '*.deb')" .
      - name: Archive deb
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-deb
          path: |
            ./*.deb         
      - name: Archive build
        uses: actions/upload-artifact@v2
        with:
          name: npm-build
          path: |
            build
            android
      # Don't need to explicitly unzip


      # https://github.com/oxr463/setup-cordova
      # This is a docker build, so I don't think any of the caching will do any good...
      # This is also using gradle 5.7 instead of 7, so we'll have to rebuild this.
      # - name: Use oxr463/setup-cordova
      #   uses: oxr463/setup-cordova@0.0.2
      #   with:
      #     exec: |
      #       cordova platform add android && \
      #       cordova build --no-telemetry && \
      #       echo "$(find . -name '*.apk')" && \
      #       cp "$(find . -name '*.apk')" .
      # https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows
      
      # https://github.com/marketplace/actions/setup-ionic
      # - name: Use coturiv/setup-ionic
      #   uses: coturiv/setup-ionic@v1
      #   with:
      #     cordova-version: 9

      # - name: Build
      #   run: |
      #     cordova platform add android
      #     cordova build --no-telemetry
      

      # https://cordova.apache.org/docs/en/latest/guide/cli/
      # We need to make sure to cache this, but ... later
      # - run: sudo npm install -g cordova # This installs cordova 10. We'll want to staple it to a specific major version.
      # - run: cordova platform add android # Again, adding that... locally. How odd.
      # - run: cordova requirements
      # - run: cordova build android 
      # limiting scope to only android here.
      # - run: sudo npm install -g cordova

      # https://forum.ionicframework.com/t/how-to-build-apk-from-capacitor-ionic-poject-without-using-android-studio/177814/7
      - run: cd android && ./gradlew assembleDebug
      - run: cp "$(find . -name '*.apk')" .

      - name: "Upload APK to Browserstack with curl"
        run: curl --silent --show-error --fail -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" -X POST "https://api-cloud.browserstack.com/app-automate/upload" -F "file=@./app-debug.apk" -F "custom_id=ElaborationApp"

      - name: Archive apks
        uses: actions/upload-artifact@v2
        with:
          name: apks
          path: |
            ./*.apk
      # https://www.browserstack.com/docs/automate/selenium/github-actions#set-up-a-github-workflow-to-run-browserstack-tests
      # Thereafter, invoke setup-env BrowserStack Action to set up 
      # environment variables in the runner

  browserstack_job:
    needs: node-deb-android-job
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}   

      # run it every time... 
      - run: npm install



      # # Final part of the path is the custom id above. Should be a variable. Will fix later.
      # - name: Get App Metadata
      #   uses: satak/webrequest-action@master
      #   with: 
      #     url: https://api-cloud.browserstack.com/app-automate/recent_apps/ElaborationApp
      #     method: GET
      #     username: ${{ secrets.BROWSERSTACK_USERNAME }}
      #     password: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

      - name: 'BrowserStack Env Setup'
        uses: 'browserstack/github-actions/setup-env@master'
        with:
          username: '${{ secrets.BROWSERSTACK_USERNAME }}'
          access-key: '${{ secrets.BROWSERSTACK_ACCESS_KEY }}'
          # build-name: (Optional) Sets the environment variable BROWSERSTACK_BUILD_NAME
          # build-name: 'BUILD_INFO'
          # project-name: (Optional) Sets the environment variable BROWSERSTACK_PROJECT_NAME
          # project-name: 'REPO_NAME'
      # # Invoke setup-local BrowserStack Action to set up a tunnel connection 
      # # between the GitHub Actions runner environment and the BrowserStack 
      # # device cloud so that the application server on the runner environment 
      # # can be accessed by the browsers in BrowserStack's device cloud
      - name: 'BrowserStackLocal Setup'
        uses: 'browserstack/github-actions/setup-local@master'
        with:
          local-testing: start
          local-identifier: random
          local-logging-level: all-logs
          local-args: --log-file '$GITHUB_WORKSPACE/browserstack.log'
        
      # https://blog.mindorks.com/github-actions-for-android
      
      # curl -u "<username>:<password>" -X POST "https://api-cloud.browserstack.com/app-automate/upload" -F "file=@/path/to/app/file/Application-debug.apk"

      

      # https://raw.githubusercontent.com/shreyanshp/upload-app-browserstack/master/README.md
      # TRAP
      # - uses: actions/upload-app-browserstack@v1
      #   with:
      #     app-path: ${{ github.workspace }}/app/build/outputs/apk/debug/app-debug.apk
      #     browserstack-username: ${{ secrets.BROWSERSTACK_USERNAME }}
      #     browserstack-accesskey: ${{ secrets.BROWSERSTACK_ACCESSKEY }}




      # Note: To be able to run these test scripts in the GitHub Actions runner environment, you have to add a step(s) in the workflow to install the required Selenium bindings for the language of your choice.
      # https://www.browserstack.com/docs/automate/selenium/github-actions#sample-github-workflow-showing-a-browserstack-test
      

      # CustomURL
      # https://www.browserstack.com/docs/app-automate/appium/upload-app-define-custom-id

      # new run, need to check out the repo again.
      

      # - run: pwd
      # - run: ls -alR 
      - name: 'Running test on BrowserStack'  # Invokes the actual test script that would run on BrowserStack browsers
        run: npm run browserstack 
        env:
          BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
          BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          GITHUB_COMMIT_MESSAGE: '${{ github.event.head_commit.message }} - ${{ github.sha}}'
          BUILD: ${{ github.repository }}
      #   # Running it from the npm runner rather than node might fix path issues?

      # # ***IMPORTANT***
      # # If you do not stop the binary after the completion of your tests, the logs will not be uploaded as artifacts.
      - name: 'BrowserStackLocal Setup'
        uses: 'browserstack/github-actions/setup-local@master'
        with:
          local-testing: stop

      # https://github.com/marketplace/actions/curl-axiosjs
      # Why am I wrapping curl in JS? WHY?

      # - name: 'Get list of recent sessions'
      #   uses: indiesdev/curl@v1
      #   with:
      #     url: "https://api-cloud.browserstack.com/app-automate/builds.json"
      #     method: 'GET'
      #     basic-auth:  "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}"
      # - name: 'Use response'
      #     run: echo ${{ steps.api.outputs.response }}
      - name: "Install jq to parse curl output"
        run: sudo apt install jq -y 
      - name: "get build id"
        run: curl --silent --show-error --fail -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}"  -X GET "https://api-cloud.browserstack.com/app-automate/builds.json" | jq -cr '.[][] | select(.name=="${{ github.repository }}") | .hashed_id' |  xargs -I{} echo ::set-output name=BUILD_ID::{}
        id: build-id
      # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions
      # - run: echo "${{ steps.build-id.outputs.BUILD_ID}}"
      - name: "Get Sessions of build: ${{ github.repository }}"
        run: curl --silent --show-error --fail  -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" -X GET "https://api-cloud.browserstack.com/app-automate/builds/${{steps.build-id.outputs.BUILD_ID}}/sessions.json" > sessions.json
      - run: cat sessions.json | jq -cr '.[][] | .appium_logs_url' | xargs -I{} echo ::set-output name=appium_log::{}
        id: appium-log-url
      - name: "fetching appium log from:  ${{steps.appium-log-url.outputs.appium_log}}"
        run: curl --silent --show-error --fail  -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESS_KEY }}" -X GET ${{steps.appium-log-url.outputs.appium_log}} > appium.log
      - run: cat sessions.json | jq -cr '.[][] | .public_url' | xargs -I{} echo ::set-output name=public_url::{}
        id: sessions-json
      - name: Archive appium log
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: |
            ./*.log
            ./*.json

      - name: "Find errors in appium log"
        run: |
          echo ::set-output name=error-count::$(grep -i "Error" appium.log | wc -l)
        id: error-count
      - run: |
          echo "Public build URL: ${{steps.sessions-json.outputs.public_url}}"
      - name: "List errors"
        run: |
          echo "::error::${{steps.error-count.outputs.error-count}} testing-errors encountered on Browserstack run."
          grep "Encountered internal error" appium.log
          echo "::error::For details: ${{steps.sessions-json.outputs.public_url}}"
        if: ${{ steps.error-count.outputs.error-count > 0}}









