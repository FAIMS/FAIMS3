{"id":2301,"name":"ActionButton","kind":128,"kindString":"Class","flags":{},"children":[{"id":2303,"name":"constructor","kind":512,"kindString":"Constructor","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":481,"character":8},{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":486,"character":8}],"signatures":[{"id":2304,"name":"constructor","kind":16384,"kindString":"Constructor signature","flags":{"isExternal":true,"isInherited":true},"parameters":[{"id":2305,"name":"props","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reflection","declaration":{"id":2306,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2307,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":23,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2308,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":27,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonClasses","qualifiedName":"ButtonClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2309,"name":"color","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'primary'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":34,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"inherit"},{"type":"literal","value":"secondary"},{"type":"literal","value":"primary"},{"type":"literal","value":"success"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"warning"}]}},{"id":2311,"name":"disableElevation","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", no elevation is used."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":47,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2312,"name":"disableFocusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the  keyboard focus ripple is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":52,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2310,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":42,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2313,"name":"endIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed after the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":56,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2314,"name":"fullWidth","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the button will take up the full width of its container."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":61,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2315,"name":"href","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The URL to link to when the button is clicked.\nIf defined, an "},{"kind":"code","text":"`a`"},{"kind":"text","text":" element will be used as the root node."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":66,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2316,"name":"size","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The size of the component.\n"},{"kind":"code","text":"`small`"},{"kind":"text","text":" is equivalent to the dense button styling."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'medium'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":72,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"small"},{"type":"literal","value":"medium"},{"type":"literal","value":"large"}]}},{"id":2317,"name":"startIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed before the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":76,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2318,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":80,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2319,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The variant to use."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'text'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":85,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"contained"},{"type":"literal","value":"outlined"}]}}],"groups":[{"title":"Properties","children":[2307,2308,2309,2311,2312,2310,2313,2314,2315,2316,2317,2318,2319]}],"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":19,"character":13}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2320,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2330,"name":"LinkComponent","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The component used to render a link when the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" prop is provided."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'a'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ElementType","qualifiedName":"React.ElementType","package":"@types/react"}},{"id":2334,"name":"TouchRippleProps","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Props applied to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":82,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleProps","qualifiedName":"TouchRippleProps","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2321,"name":"action","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref for imperative actions.\nIt currently only supports "},{"kind":"code","text":"`focusVisible()`"},{"kind":"text","text":" action."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":14,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseActions","qualifiedName":"ButtonBaseActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}},{"id":2322,"name":"centerRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripples are centered.\nThey won't start at the cursor interaction position."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":20,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2323,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":24,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2324,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":28,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseClasses","qualifiedName":"ButtonBaseClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2326,"name":"disableRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the "},{"kind":"code","text":"`.Mui-focusVisible`"},{"kind":"text","text":" class."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":41,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2327,"name":"disableTouchRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the touch ripple effect is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":46,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2325,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":33,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2328,"name":"focusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the base button will have a keyboard focus ripple."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":51,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2329,"name":"focusVisibleClassName","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "},{"kind":"code","text":"`focus-visible`"},{"kind":"text","text":" class to other components\nif needed."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":60,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2331,"name":"onFocusVisible","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Callback fired when the component is focused with a keyboard.\nWe trigger a "},{"kind":"code","text":"`onFocus`"},{"kind":"text","text":" callback too."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":70,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"FocusEventHandler","qualifiedName":"React.FocusEventHandler","package":"@types/react"}},{"id":2332,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":74,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2333,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":78,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2335,"name":"touchRippleRef","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref that points to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":86,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleActions","qualifiedName":"TouchRippleActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2330,2334,2321,2322,2323,2324,2326,2327,2325,2328,2329,2331,2332,2333,2335]}],"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":9,"character":13}]}},{"type":"literal","value":"classes"}],"name":"Omit","qualifiedName":"Omit","package":"typescript"},{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"DetailedHTMLProps","qualifiedName":"React.DetailedHTMLProps","package":"@types/react"},{"type":"union","types":[{"type":"literal","value":"key"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"}}]}],"name":"Pick","qualifiedName":"Pick","package":"typescript"},{"type":"reflection","declaration":{"id":2336,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2337,"name":"ref","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":45}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2338,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":91,"character":28}],"signatures":[{"id":2339,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2340,"name":"instance","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"RefObject","qualifiedName":"React.RefObject","package":"@types/react"}]}}],"groups":[{"title":"Properties","children":[2337]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":43}]}}]},{"type":"union","types":[{"type":"literal","value":"children"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"}},{"type":"literal","value":"color"},{"type":"literal","value":"sx"},{"type":"literal","value":"tabIndex"},{"type":"literal","value":"href"},{"type":"literal","value":"disabled"},{"type":"literal","value":"action"},{"type":"literal","value":"size"},{"type":"literal","value":"variant"},{"type":"literal","value":"centerRipple"},{"type":"literal","value":"disableRipple"},{"type":"literal","value":"disableTouchRipple"},{"type":"literal","value":"focusRipple"},{"type":"literal","value":"focusVisibleClassName"},{"type":"literal","value":"LinkComponent"},{"type":"literal","value":"onFocusVisible"},{"type":"literal","value":"TouchRippleProps"},{"type":"literal","value":"touchRippleRef"},{"type":"literal","value":"disableElevation"},{"type":"literal","value":"disableFocusRipple"},{"type":"literal","value":"endIcon"},{"type":"literal","value":"fullWidth"},{"type":"literal","value":"startIcon"}]}],"name":"Omit","qualifiedName":"Omit","package":"typescript"}]},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reflection","declaration":{"id":2341,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2342,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":23,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2343,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":27,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonClasses","qualifiedName":"ButtonClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2344,"name":"color","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'primary'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":34,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"inherit"},{"type":"literal","value":"secondary"},{"type":"literal","value":"primary"},{"type":"literal","value":"success"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"warning"}]}},{"id":2346,"name":"disableElevation","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", no elevation is used."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":47,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2347,"name":"disableFocusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the  keyboard focus ripple is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":52,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2345,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":42,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2348,"name":"endIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed after the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":56,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2349,"name":"fullWidth","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the button will take up the full width of its container."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":61,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2350,"name":"href","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The URL to link to when the button is clicked.\nIf defined, an "},{"kind":"code","text":"`a`"},{"kind":"text","text":" element will be used as the root node."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":66,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2351,"name":"size","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The size of the component.\n"},{"kind":"code","text":"`small`"},{"kind":"text","text":" is equivalent to the dense button styling."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'medium'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":72,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"small"},{"type":"literal","value":"medium"},{"type":"literal","value":"large"}]}},{"id":2352,"name":"startIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed before the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":76,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2353,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":80,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2354,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The variant to use."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'text'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":85,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"contained"},{"type":"literal","value":"outlined"}]}}],"groups":[{"title":"Properties","children":[2342,2343,2344,2346,2347,2345,2348,2349,2350,2351,2352,2353,2354]}],"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":19,"character":13}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2355,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2365,"name":"LinkComponent","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The component used to render a link when the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" prop is provided."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'a'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ElementType","qualifiedName":"React.ElementType","package":"@types/react"}},{"id":2369,"name":"TouchRippleProps","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Props applied to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":82,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleProps","qualifiedName":"TouchRippleProps","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2356,"name":"action","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref for imperative actions.\nIt currently only supports "},{"kind":"code","text":"`focusVisible()`"},{"kind":"text","text":" action."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":14,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseActions","qualifiedName":"ButtonBaseActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}},{"id":2357,"name":"centerRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripples are centered.\nThey won't start at the cursor interaction position."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":20,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2358,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":24,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2359,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":28,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseClasses","qualifiedName":"ButtonBaseClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2361,"name":"disableRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the "},{"kind":"code","text":"`.Mui-focusVisible`"},{"kind":"text","text":" class."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":41,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2362,"name":"disableTouchRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the touch ripple effect is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":46,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2360,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":33,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2363,"name":"focusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the base button will have a keyboard focus ripple."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":51,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2364,"name":"focusVisibleClassName","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "},{"kind":"code","text":"`focus-visible`"},{"kind":"text","text":" class to other components\nif needed."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":60,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2366,"name":"onFocusVisible","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Callback fired when the component is focused with a keyboard.\nWe trigger a "},{"kind":"code","text":"`onFocus`"},{"kind":"text","text":" callback too."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":70,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"FocusEventHandler","qualifiedName":"React.FocusEventHandler","package":"@types/react"}},{"id":2367,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":74,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2368,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":78,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2370,"name":"touchRippleRef","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref that points to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":86,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleActions","qualifiedName":"TouchRippleActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2365,2369,2356,2357,2358,2359,2361,2362,2360,2363,2364,2366,2367,2368,2370]}],"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":9,"character":13}]}},{"type":"literal","value":"classes"}],"name":"Omit","qualifiedName":"Omit","package":"typescript"},{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"DetailedHTMLProps","qualifiedName":"React.DetailedHTMLProps","package":"@types/react"},{"type":"union","types":[{"type":"literal","value":"key"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"}}]}],"name":"Pick","qualifiedName":"Pick","package":"typescript"},{"type":"reflection","declaration":{"id":2371,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2372,"name":"ref","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":45}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2373,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":91,"character":28}],"signatures":[{"id":2374,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2375,"name":"instance","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"RefObject","qualifiedName":"React.RefObject","package":"@types/react"}]}}],"groups":[{"title":"Properties","children":[2372]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":43}]}}]},{"type":"union","types":[{"type":"literal","value":"children"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"}},{"type":"literal","value":"color"},{"type":"literal","value":"sx"},{"type":"literal","value":"tabIndex"},{"type":"literal","value":"href"},{"type":"literal","value":"disabled"},{"type":"literal","value":"action"},{"type":"literal","value":"size"},{"type":"literal","value":"variant"},{"type":"literal","value":"centerRipple"},{"type":"literal","value":"disableRipple"},{"type":"literal","value":"disableTouchRipple"},{"type":"literal","value":"focusRipple"},{"type":"literal","value":"focusVisibleClassName"},{"type":"literal","value":"LinkComponent"},{"type":"literal","value":"onFocusVisible"},{"type":"literal","value":"TouchRippleProps"},{"type":"literal","value":"touchRippleRef"},{"type":"literal","value":"disableElevation"},{"type":"literal","value":"disableFocusRipple"},{"type":"literal","value":"endIcon"},{"type":"literal","value":"fullWidth"},{"type":"literal","value":"startIcon"}]}],"name":"Omit","qualifiedName":"Omit","package":"typescript"}]}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}]},"text":{}}],"type":{"type":"reference","id":2301,"name":"ActionButton"},"inheritedFrom":{"type":"reference","name":"React.Component<\n  FieldProps & Props & ButtonProps\n>.constructor"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Constructor.constructor","hash":"constructor.new ActionButton"},"text":{},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":481,"character":8}],"parentId":2303},{"id":2376,"name":"constructor","kind":16384,"kindString":"Constructor signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[]},{"tag":"@see","content":[{"kind":"text","text":"https://reactjs.org/docs/legacy-context.html"}]}]},"parameters":[{"id":2377,"name":"props","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reflection","declaration":{"id":2378,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2379,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":23,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2380,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":27,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonClasses","qualifiedName":"ButtonClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2381,"name":"color","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'primary'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":34,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"inherit"},{"type":"literal","value":"secondary"},{"type":"literal","value":"primary"},{"type":"literal","value":"success"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"warning"}]}},{"id":2383,"name":"disableElevation","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", no elevation is used."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":47,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2384,"name":"disableFocusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the  keyboard focus ripple is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":52,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2382,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":42,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2385,"name":"endIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed after the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":56,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2386,"name":"fullWidth","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the button will take up the full width of its container."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":61,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2387,"name":"href","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The URL to link to when the button is clicked.\nIf defined, an "},{"kind":"code","text":"`a`"},{"kind":"text","text":" element will be used as the root node."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":66,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2388,"name":"size","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The size of the component.\n"},{"kind":"code","text":"`small`"},{"kind":"text","text":" is equivalent to the dense button styling."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'medium'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":72,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"small"},{"type":"literal","value":"medium"},{"type":"literal","value":"large"}]}},{"id":2389,"name":"startIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed before the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":76,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2390,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":80,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2391,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The variant to use."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'text'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":85,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"contained"},{"type":"literal","value":"outlined"}]}}],"groups":[{"title":"Properties","children":[2379,2380,2381,2383,2384,2382,2385,2386,2387,2388,2389,2390,2391]}],"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":19,"character":13}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2392,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2402,"name":"LinkComponent","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The component used to render a link when the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" prop is provided."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'a'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ElementType","qualifiedName":"React.ElementType","package":"@types/react"}},{"id":2406,"name":"TouchRippleProps","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Props applied to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":82,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleProps","qualifiedName":"TouchRippleProps","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2393,"name":"action","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref for imperative actions.\nIt currently only supports "},{"kind":"code","text":"`focusVisible()`"},{"kind":"text","text":" action."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":14,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseActions","qualifiedName":"ButtonBaseActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}},{"id":2394,"name":"centerRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripples are centered.\nThey won't start at the cursor interaction position."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":20,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2395,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":24,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2396,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":28,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseClasses","qualifiedName":"ButtonBaseClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2398,"name":"disableRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the "},{"kind":"code","text":"`.Mui-focusVisible`"},{"kind":"text","text":" class."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":41,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2399,"name":"disableTouchRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the touch ripple effect is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":46,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2397,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":33,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2400,"name":"focusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the base button will have a keyboard focus ripple."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":51,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2401,"name":"focusVisibleClassName","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "},{"kind":"code","text":"`focus-visible`"},{"kind":"text","text":" class to other components\nif needed."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":60,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2403,"name":"onFocusVisible","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Callback fired when the component is focused with a keyboard.\nWe trigger a "},{"kind":"code","text":"`onFocus`"},{"kind":"text","text":" callback too."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":70,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"FocusEventHandler","qualifiedName":"React.FocusEventHandler","package":"@types/react"}},{"id":2404,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":74,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2405,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":78,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2407,"name":"touchRippleRef","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref that points to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":86,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleActions","qualifiedName":"TouchRippleActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2402,2406,2393,2394,2395,2396,2398,2399,2397,2400,2401,2403,2404,2405,2407]}],"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":9,"character":13}]}},{"type":"literal","value":"classes"}],"name":"Omit","qualifiedName":"Omit","package":"typescript"},{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"DetailedHTMLProps","qualifiedName":"React.DetailedHTMLProps","package":"@types/react"},{"type":"union","types":[{"type":"literal","value":"key"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"}}]}],"name":"Pick","qualifiedName":"Pick","package":"typescript"},{"type":"reflection","declaration":{"id":2408,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2409,"name":"ref","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":45}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2410,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":91,"character":28}],"signatures":[{"id":2411,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2412,"name":"instance","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"RefObject","qualifiedName":"React.RefObject","package":"@types/react"}]}}],"groups":[{"title":"Properties","children":[2409]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":43}]}}]},{"type":"union","types":[{"type":"literal","value":"children"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"}},{"type":"literal","value":"color"},{"type":"literal","value":"sx"},{"type":"literal","value":"tabIndex"},{"type":"literal","value":"href"},{"type":"literal","value":"disabled"},{"type":"literal","value":"action"},{"type":"literal","value":"size"},{"type":"literal","value":"variant"},{"type":"literal","value":"centerRipple"},{"type":"literal","value":"disableRipple"},{"type":"literal","value":"disableTouchRipple"},{"type":"literal","value":"focusRipple"},{"type":"literal","value":"focusVisibleClassName"},{"type":"literal","value":"LinkComponent"},{"type":"literal","value":"onFocusVisible"},{"type":"literal","value":"TouchRippleProps"},{"type":"literal","value":"touchRippleRef"},{"type":"literal","value":"disableElevation"},{"type":"literal","value":"disableFocusRipple"},{"type":"literal","value":"endIcon"},{"type":"literal","value":"fullWidth"},{"type":"literal","value":"startIcon"}]}],"name":"Omit","qualifiedName":"Omit","package":"typescript"}]},"text":{}},{"id":2413,"name":"context","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"},"text":{}}],"type":{"type":"reference","id":2301,"name":"ActionButton"},"inheritedFrom":{"type":"reference","name":"React.Component<\n  FieldProps & Props & ButtonProps\n>.constructor"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Constructor.constructor","hash":"constructor.new ActionButton"},"text":{"comment":"<h5>Deprecated:</h5><h5>See:</h5><p><a href=\"https://reactjs.org/docs/legacy-context.html\">https://reactjs.org/docs/legacy-context.html</a></p>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":486,"character":8}],"parentId":2303}],"inheritedFrom":{"type":"reference","name":"React.Component<\n  FieldProps & Props & ButtonProps\n>.constructor"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"constructor"},"text":{},"parentId":2301},{"id":2418,"name":"context","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"If using the new style context, re-declare this in your class to be the\n"},{"kind":"code","text":"`React.ContextType`"},{"kind":"text","text":" of your "},{"kind":"code","text":"`static contextType`"},{"kind":"text","text":".\nShould be used with type annotation or static contextType.\n\n"},{"kind":"code","text":"```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```"}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"https://reactjs.org/docs/context.html"}]}]},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":479,"character":8}],"type":{"type":"intrinsic","name":"any"},"inheritedFrom":{"type":"reference","name":"React.Component.context"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"context"},"text":{"comment":"<p>If using the new style context, re-declare this in your class to be the\n<code>React.ContextType</code> of your <code>static contextType</code>.\nShould be used with type annotation or static contextType.</p>\n<pre><code class=\"language-ts\"><span class=\"pl-smi\">static</span> <span class=\"pl-smi\">contextType</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">MyContext</span>\n<span class=\"pl-c\">// For TS pre-3.7:</span>\n<span class=\"pl-smi\">context</span><span class=\"pl-k\">!</span>: <span class=\"pl-smi\">React</span>.<span class=\"pl-smi\">ContextType</span><span class=\"pl-k\">&#x3C;typeof</span> <span class=\"pl-smi\">MyContext</span><span class=\"pl-k\">></span>\n<span class=\"pl-c\">// For TS 3.7 and above:</span>\n<span class=\"pl-k\">declare</span> <span class=\"pl-en\">context</span>: <span class=\"pl-smi\">React</span>.<span class=\"pl-smi\">ContextType</span><span class=\"pl-k\">&#x3C;typeof</span> <span class=\"pl-smi\">MyContext</span><span class=\"pl-k\">></span>\n</code></pre>\n<h5>See:</h5><p><a href=\"https://reactjs.org/docs/context.html\">https://reactjs.org/docs/context.html</a></p>\n"},"parentId":2301},{"id":2475,"name":"props","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isReadonly":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":504,"character":17}],"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reflection","declaration":{"id":2476,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2477,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":23,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2478,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":27,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonClasses","qualifiedName":"ButtonClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2479,"name":"color","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'primary'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":34,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"inherit"},{"type":"literal","value":"secondary"},{"type":"literal","value":"primary"},{"type":"literal","value":"success"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"warning"}]}},{"id":2481,"name":"disableElevation","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", no elevation is used."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":47,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2482,"name":"disableFocusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the  keyboard focus ripple is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":52,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2480,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":42,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2483,"name":"endIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed after the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":56,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2484,"name":"fullWidth","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the button will take up the full width of its container."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":61,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2485,"name":"href","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The URL to link to when the button is clicked.\nIf defined, an "},{"kind":"code","text":"`a`"},{"kind":"text","text":" element will be used as the root node."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":66,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2486,"name":"size","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The size of the component.\n"},{"kind":"code","text":"`small`"},{"kind":"text","text":" is equivalent to the dense button styling."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'medium'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":72,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"small"},{"type":"literal","value":"medium"},{"type":"literal","value":"large"}]}},{"id":2487,"name":"startIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed before the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":76,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2488,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":80,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2489,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The variant to use."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'text'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":85,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"contained"},{"type":"literal","value":"outlined"}]}}],"groups":[{"title":"Properties","children":[2477,2478,2479,2481,2482,2480,2483,2484,2485,2486,2487,2488,2489]}],"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":19,"character":13}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2490,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2500,"name":"LinkComponent","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The component used to render a link when the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" prop is provided."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'a'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ElementType","qualifiedName":"React.ElementType","package":"@types/react"}},{"id":2504,"name":"TouchRippleProps","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Props applied to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":82,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleProps","qualifiedName":"TouchRippleProps","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2491,"name":"action","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref for imperative actions.\nIt currently only supports "},{"kind":"code","text":"`focusVisible()`"},{"kind":"text","text":" action."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":14,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseActions","qualifiedName":"ButtonBaseActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}},{"id":2492,"name":"centerRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripples are centered.\nThey won't start at the cursor interaction position."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":20,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2493,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":24,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2494,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":28,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseClasses","qualifiedName":"ButtonBaseClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2496,"name":"disableRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the "},{"kind":"code","text":"`.Mui-focusVisible`"},{"kind":"text","text":" class."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":41,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2497,"name":"disableTouchRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the touch ripple effect is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":46,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2495,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":33,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2498,"name":"focusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the base button will have a keyboard focus ripple."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":51,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2499,"name":"focusVisibleClassName","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "},{"kind":"code","text":"`focus-visible`"},{"kind":"text","text":" class to other components\nif needed."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":60,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2501,"name":"onFocusVisible","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Callback fired when the component is focused with a keyboard.\nWe trigger a "},{"kind":"code","text":"`onFocus`"},{"kind":"text","text":" callback too."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":70,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"FocusEventHandler","qualifiedName":"React.FocusEventHandler","package":"@types/react"}},{"id":2502,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":74,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2503,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":78,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2505,"name":"touchRippleRef","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref that points to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":86,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleActions","qualifiedName":"TouchRippleActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2500,2504,2491,2492,2493,2494,2496,2497,2495,2498,2499,2501,2502,2503,2505]}],"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":9,"character":13}]}},{"type":"literal","value":"classes"}],"name":"Omit","qualifiedName":"Omit","package":"typescript"},{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"DetailedHTMLProps","qualifiedName":"React.DetailedHTMLProps","package":"@types/react"},{"type":"union","types":[{"type":"literal","value":"key"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"}}]}],"name":"Pick","qualifiedName":"Pick","package":"typescript"},{"type":"reflection","declaration":{"id":2506,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2507,"name":"ref","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":45}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2508,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":91,"character":28}],"signatures":[{"id":2509,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2510,"name":"instance","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"RefObject","qualifiedName":"React.RefObject","package":"@types/react"}]}}],"groups":[{"title":"Properties","children":[2507]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":43}]}}]},{"type":"union","types":[{"type":"literal","value":"children"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"}},{"type":"literal","value":"color"},{"type":"literal","value":"sx"},{"type":"literal","value":"tabIndex"},{"type":"literal","value":"href"},{"type":"literal","value":"disabled"},{"type":"literal","value":"action"},{"type":"literal","value":"size"},{"type":"literal","value":"variant"},{"type":"literal","value":"centerRipple"},{"type":"literal","value":"disableRipple"},{"type":"literal","value":"disableTouchRipple"},{"type":"literal","value":"focusRipple"},{"type":"literal","value":"focusVisibleClassName"},{"type":"literal","value":"LinkComponent"},{"type":"literal","value":"onFocusVisible"},{"type":"literal","value":"TouchRippleProps"},{"type":"literal","value":"touchRippleRef"},{"type":"literal","value":"disableElevation"},{"type":"literal","value":"disableFocusRipple"},{"type":"literal","value":"endIcon"},{"type":"literal","value":"fullWidth"},{"type":"literal","value":"startIcon"}]}],"name":"Omit","qualifiedName":"Omit","package":"typescript"}]}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2511,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2512,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":504,"character":49}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2512]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":504,"character":47}]}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}]},"inheritedFrom":{"type":"reference","name":"React.Component.props"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"props"},"text":{},"parentId":2301},{"id":2515,"name":"refs","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs"}]}]},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":510,"character":8}],"type":{"type":"reflection","declaration":{"id":2516,"name":"refs","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":510,"character":14}],"indexSignature":{"id":2517,"name":"__index","kind":8192,"kindString":"Index signature","flags":{"isExternal":true},"parameters":[{"id":2518,"name":"key","kind":32768,"flags":{"isExternal":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"ReactInstance","qualifiedName":"React.ReactInstance","package":"@types/react"}},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"refs"}}},"inheritedFrom":{"type":"reference","name":"React.Component.refs"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"refs"},"text":{"comment":"<h5>Deprecated:</h5><p><a href=\"https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\">https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs</a></p>\n"},"parentId":2301},{"id":2513,"name":"state","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":505,"character":8}],"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2514,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"inheritedFrom":{"type":"reference","name":"React.Component.state"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"state"},"text":{},"parentId":2301},{"id":2302,"name":"contextType","kind":1024,"kindString":"Property","flags":{"isStatic":true,"isExternal":true,"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"If set, "},{"kind":"code","text":"`this.context`"},{"kind":"text","text":" will be set at runtime to the current value of the given Context.\n\nUsage:\n\n"},{"kind":"code","text":"```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```"}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"https://reactjs.org/docs/context.html#classcontexttype"}]}]},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":461,"character":15}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Context","qualifiedName":"React.Context","package":"@types/react"},"inheritedFrom":{"type":"reference","name":"React.Component.contextType"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"contextType"},"text":{"comment":"<p>If set, <code>this.context</code> will be set at runtime to the current value of the given Context.</p>\n<p>Usage:</p>\n<pre><code class=\"language-ts\"><span class=\"pl-k\">type</span> <span class=\"pl-en\">MyContext</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">number</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">Ctx</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">React</span>.<span class=\"pl-en\">createContext</span>&#x3C;<span class=\"pl-en\">MyContext</span>>(<span class=\"pl-c1\">0</span>)\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Foo</span> <span class=\"pl-k\">extends</span> <span class=\"pl-en\">React</span>.<span class=\"pl-e\">Component</span> {\n  <span class=\"pl-k\">static</span> <span class=\"pl-v\">contextType</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Ctx</span>\n  <span class=\"pl-v\">context</span><span class=\"pl-k\">!:</span> <span class=\"pl-en\">React</span>.<span class=\"pl-en\">ContextType</span>&#x3C;<span class=\"pl-k\">typeof</span> <span class=\"pl-smi\">Ctx</span>>\n  <span class=\"pl-en\">render</span> () {\n    <span class=\"pl-k\">return</span> &#x3C;><span class=\"pl-smi\">My</span> <span class=\"pl-smi\">context</span><span class=\"pl-s\"><span class=\"pl-pds\">'</span>s value: {this.context}&#x3C;/><span class=\"pl-ii\">;</span></span>\n  }\n}\n</code></pre>\n<h5>See:</h5><p><a href=\"https://reactjs.org/docs/context.html#classcontexttype\">https://reactjs.org/docs/context.html#classcontexttype</a></p>\n"},"parentId":2301},{"id":2651,"name":"UNSAFE_componentWillMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":717,"character":8}],"signatures":[{"id":2652,"name":"UNSAFE_componentWillMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before mounting occurs, and before "},{"kind":"code","text":"`Component#render`"},{"kind":"text","text":".\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use componentDidMount or the constructor instead"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillMount"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.UNSAFE_componentWillMount","hash":"UNSAFE_componentWillMount.UNSAFE_componentWillMount"},"text":{"comment":"<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n<h5>Deprecated:</h5><p>16.3, use componentDidMount or the constructor instead</p>\n<h5>See:</h5><ul>\n<li><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state</a></li>\n<li><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</a></li>\n</ul>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":717,"character":8}],"parentId":2651}],"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillMount"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"UNSAFE_componentWillMount"},"text":{},"parentId":2301},{"id":2692,"name":"UNSAFE_componentWillReceiveProps","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":749,"character":8}],"signatures":[{"id":2693,"name":"UNSAFE_componentWillReceiveProps","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling "},{"kind":"code","text":"`Component#setState`"},{"kind":"text","text":" generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use static getDerivedStateFromProps instead"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"parameters":[{"id":2694,"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reflection","declaration":{"id":2695,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2696,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":23,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2697,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":27,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonClasses","qualifiedName":"ButtonClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2698,"name":"color","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'primary'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":34,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"inherit"},{"type":"literal","value":"secondary"},{"type":"literal","value":"primary"},{"type":"literal","value":"success"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"warning"}]}},{"id":2700,"name":"disableElevation","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", no elevation is used."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":47,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2701,"name":"disableFocusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the  keyboard focus ripple is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":52,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2699,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":42,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2702,"name":"endIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed after the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":56,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2703,"name":"fullWidth","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the button will take up the full width of its container."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":61,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2704,"name":"href","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The URL to link to when the button is clicked.\nIf defined, an "},{"kind":"code","text":"`a`"},{"kind":"text","text":" element will be used as the root node."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":66,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2705,"name":"size","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The size of the component.\n"},{"kind":"code","text":"`small`"},{"kind":"text","text":" is equivalent to the dense button styling."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'medium'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":72,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"small"},{"type":"literal","value":"medium"},{"type":"literal","value":"large"}]}},{"id":2706,"name":"startIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed before the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":76,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2707,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":80,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2708,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The variant to use."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'text'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":85,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"contained"},{"type":"literal","value":"outlined"}]}}],"groups":[{"title":"Properties","children":[2696,2697,2698,2700,2701,2699,2702,2703,2704,2705,2706,2707,2708]}],"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":19,"character":13}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2709,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2719,"name":"LinkComponent","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The component used to render a link when the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" prop is provided."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'a'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ElementType","qualifiedName":"React.ElementType","package":"@types/react"}},{"id":2723,"name":"TouchRippleProps","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Props applied to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":82,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleProps","qualifiedName":"TouchRippleProps","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2710,"name":"action","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref for imperative actions.\nIt currently only supports "},{"kind":"code","text":"`focusVisible()`"},{"kind":"text","text":" action."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":14,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseActions","qualifiedName":"ButtonBaseActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}},{"id":2711,"name":"centerRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripples are centered.\nThey won't start at the cursor interaction position."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":20,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2712,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":24,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2713,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":28,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseClasses","qualifiedName":"ButtonBaseClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2715,"name":"disableRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the "},{"kind":"code","text":"`.Mui-focusVisible`"},{"kind":"text","text":" class."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":41,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2716,"name":"disableTouchRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the touch ripple effect is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":46,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2714,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":33,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2717,"name":"focusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the base button will have a keyboard focus ripple."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":51,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2718,"name":"focusVisibleClassName","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "},{"kind":"code","text":"`focus-visible`"},{"kind":"text","text":" class to other components\nif needed."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":60,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2720,"name":"onFocusVisible","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Callback fired when the component is focused with a keyboard.\nWe trigger a "},{"kind":"code","text":"`onFocus`"},{"kind":"text","text":" callback too."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":70,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"FocusEventHandler","qualifiedName":"React.FocusEventHandler","package":"@types/react"}},{"id":2721,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":74,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2722,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":78,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2724,"name":"touchRippleRef","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref that points to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":86,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleActions","qualifiedName":"TouchRippleActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2719,2723,2710,2711,2712,2713,2715,2716,2714,2717,2718,2720,2721,2722,2724]}],"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":9,"character":13}]}},{"type":"literal","value":"classes"}],"name":"Omit","qualifiedName":"Omit","package":"typescript"},{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"DetailedHTMLProps","qualifiedName":"React.DetailedHTMLProps","package":"@types/react"},{"type":"union","types":[{"type":"literal","value":"key"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"}}]}],"name":"Pick","qualifiedName":"Pick","package":"typescript"},{"type":"reflection","declaration":{"id":2725,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2726,"name":"ref","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":45}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2727,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":91,"character":28}],"signatures":[{"id":2728,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2729,"name":"instance","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"RefObject","qualifiedName":"React.RefObject","package":"@types/react"}]}}],"groups":[{"title":"Properties","children":[2726]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":43}]}}]},{"type":"union","types":[{"type":"literal","value":"children"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"}},{"type":"literal","value":"color"},{"type":"literal","value":"sx"},{"type":"literal","value":"tabIndex"},{"type":"literal","value":"href"},{"type":"literal","value":"disabled"},{"type":"literal","value":"action"},{"type":"literal","value":"size"},{"type":"literal","value":"variant"},{"type":"literal","value":"centerRipple"},{"type":"literal","value":"disableRipple"},{"type":"literal","value":"disableTouchRipple"},{"type":"literal","value":"focusRipple"},{"type":"literal","value":"focusVisibleClassName"},{"type":"literal","value":"LinkComponent"},{"type":"literal","value":"onFocusVisible"},{"type":"literal","value":"TouchRippleProps"},{"type":"literal","value":"touchRippleRef"},{"type":"literal","value":"disableElevation"},{"type":"literal","value":"disableFocusRipple"},{"type":"literal","value":"endIcon"},{"type":"literal","value":"fullWidth"},{"type":"literal","value":"startIcon"}]}],"name":"Omit","qualifiedName":"Omit","package":"typescript"}]}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"text":{}},{"id":2730,"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"},"text":{}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillReceiveProps"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.UNSAFE_componentWillReceiveProps","hash":"UNSAFE_componentWillReceiveProps.UNSAFE_componentWillReceiveProps"},"text":{"comment":"<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n<h5>Deprecated:</h5><p>16.3, use static getDerivedStateFromProps instead</p>\n<h5>See:</h5><ul>\n<li><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props</a></li>\n<li><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</a></li>\n</ul>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":749,"character":8}],"parentId":2692}],"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillReceiveProps"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"UNSAFE_componentWillReceiveProps"},"text":{},"parentId":2301},{"id":2772,"name":"UNSAFE_componentWillUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":777,"character":8}],"signatures":[{"id":2773,"name":"UNSAFE_componentWillUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call "},{"kind":"code","text":"`Component#setState`"},{"kind":"text","text":" here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use getSnapshotBeforeUpdate instead"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"parameters":[{"id":2774,"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reflection","declaration":{"id":2775,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2776,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":23,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2777,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":27,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonClasses","qualifiedName":"ButtonClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2778,"name":"color","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'primary'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":34,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"inherit"},{"type":"literal","value":"secondary"},{"type":"literal","value":"primary"},{"type":"literal","value":"success"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"warning"}]}},{"id":2780,"name":"disableElevation","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", no elevation is used."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":47,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2781,"name":"disableFocusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the  keyboard focus ripple is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":52,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2779,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":42,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2782,"name":"endIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed after the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":56,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2783,"name":"fullWidth","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the button will take up the full width of its container."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":61,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2784,"name":"href","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The URL to link to when the button is clicked.\nIf defined, an "},{"kind":"code","text":"`a`"},{"kind":"text","text":" element will be used as the root node."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":66,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2785,"name":"size","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The size of the component.\n"},{"kind":"code","text":"`small`"},{"kind":"text","text":" is equivalent to the dense button styling."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'medium'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":72,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"small"},{"type":"literal","value":"medium"},{"type":"literal","value":"large"}]}},{"id":2786,"name":"startIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed before the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":76,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2787,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":80,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2788,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The variant to use."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'text'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":85,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"contained"},{"type":"literal","value":"outlined"}]}}],"groups":[{"title":"Properties","children":[2776,2777,2778,2780,2781,2779,2782,2783,2784,2785,2786,2787,2788]}],"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":19,"character":13}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2789,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2799,"name":"LinkComponent","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The component used to render a link when the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" prop is provided."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'a'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ElementType","qualifiedName":"React.ElementType","package":"@types/react"}},{"id":2803,"name":"TouchRippleProps","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Props applied to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":82,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleProps","qualifiedName":"TouchRippleProps","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2790,"name":"action","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref for imperative actions.\nIt currently only supports "},{"kind":"code","text":"`focusVisible()`"},{"kind":"text","text":" action."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":14,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseActions","qualifiedName":"ButtonBaseActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}},{"id":2791,"name":"centerRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripples are centered.\nThey won't start at the cursor interaction position."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":20,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2792,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":24,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2793,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":28,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseClasses","qualifiedName":"ButtonBaseClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2795,"name":"disableRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the "},{"kind":"code","text":"`.Mui-focusVisible`"},{"kind":"text","text":" class."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":41,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2796,"name":"disableTouchRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the touch ripple effect is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":46,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2794,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":33,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2797,"name":"focusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the base button will have a keyboard focus ripple."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":51,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2798,"name":"focusVisibleClassName","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "},{"kind":"code","text":"`focus-visible`"},{"kind":"text","text":" class to other components\nif needed."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":60,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2800,"name":"onFocusVisible","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Callback fired when the component is focused with a keyboard.\nWe trigger a "},{"kind":"code","text":"`onFocus`"},{"kind":"text","text":" callback too."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":70,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"FocusEventHandler","qualifiedName":"React.FocusEventHandler","package":"@types/react"}},{"id":2801,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":74,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2802,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":78,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2804,"name":"touchRippleRef","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref that points to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":86,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleActions","qualifiedName":"TouchRippleActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2799,2803,2790,2791,2792,2793,2795,2796,2794,2797,2798,2800,2801,2802,2804]}],"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":9,"character":13}]}},{"type":"literal","value":"classes"}],"name":"Omit","qualifiedName":"Omit","package":"typescript"},{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"DetailedHTMLProps","qualifiedName":"React.DetailedHTMLProps","package":"@types/react"},{"type":"union","types":[{"type":"literal","value":"key"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"}}]}],"name":"Pick","qualifiedName":"Pick","package":"typescript"},{"type":"reflection","declaration":{"id":2805,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2806,"name":"ref","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":45}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2807,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":91,"character":28}],"signatures":[{"id":2808,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2809,"name":"instance","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"RefObject","qualifiedName":"React.RefObject","package":"@types/react"}]}}],"groups":[{"title":"Properties","children":[2806]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":43}]}}]},{"type":"union","types":[{"type":"literal","value":"children"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"}},{"type":"literal","value":"color"},{"type":"literal","value":"sx"},{"type":"literal","value":"tabIndex"},{"type":"literal","value":"href"},{"type":"literal","value":"disabled"},{"type":"literal","value":"action"},{"type":"literal","value":"size"},{"type":"literal","value":"variant"},{"type":"literal","value":"centerRipple"},{"type":"literal","value":"disableRipple"},{"type":"literal","value":"disableTouchRipple"},{"type":"literal","value":"focusRipple"},{"type":"literal","value":"focusVisibleClassName"},{"type":"literal","value":"LinkComponent"},{"type":"literal","value":"onFocusVisible"},{"type":"literal","value":"TouchRippleProps"},{"type":"literal","value":"touchRippleRef"},{"type":"literal","value":"disableElevation"},{"type":"literal","value":"disableFocusRipple"},{"type":"literal","value":"endIcon"},{"type":"literal","value":"fullWidth"},{"type":"literal","value":"startIcon"}]}],"name":"Omit","qualifiedName":"Omit","package":"typescript"}]}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"text":{}},{"id":2810,"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2811,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"text":{}},{"id":2812,"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"},"text":{}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillUpdate"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.UNSAFE_componentWillUpdate","hash":"UNSAFE_componentWillUpdate.UNSAFE_componentWillUpdate"},"text":{"comment":"<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n<h5>Deprecated:</h5><p>16.3, use getSnapshotBeforeUpdate instead</p>\n<h5>See:</h5><ul>\n<li><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update</a></li>\n<li><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</a></li>\n</ul>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":777,"character":8}],"parentId":2772}],"inheritedFrom":{"type":"reference","name":"React.Component.UNSAFE_componentWillUpdate"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"UNSAFE_componentWillUpdate"},"text":{},"parentId":2301},{"id":2414,"name":"clickThis","kind":2048,"kindString":"Method","flags":{},"sources":[{"fileName":"src/gui/fields/ActionButton.tsx","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/src/gui/fields/ActionButton.tsx","line":34,"character":2,"url":"https://github.com/FAIMS/FAIMS3/blob/a300d3b/src/gui/fields/ActionButton.tsx#L34"}],"signatures":[{"id":2415,"name":"clickThis","kind":4096,"kindString":"Call signature","flags":{},"type":{"type":"intrinsic","name":"void"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.clickThis","hash":"clickThis.clickThis"},"text":{},"sources":[{"fileName":"src/gui/fields/ActionButton.tsx","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/src/gui/fields/ActionButton.tsx","line":34,"character":2,"url":"https://github.com/FAIMS/FAIMS3/blob/a300d3b/src/gui/fields/ActionButton.tsx#L34"}],"parentId":2414}],"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"clickThis"},"text":{},"parentId":2301},{"id":2564,"name":"componentDidCatch","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":646,"character":8}],"signatures":[{"id":2565,"name":"componentDidCatch","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."}]},"parameters":[{"id":2566,"name":"error","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"Error","qualifiedName":"Error","package":"typescript"},"text":{}},{"id":2567,"name":"errorInfo","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"ErrorInfo","qualifiedName":"React.ErrorInfo","package":"@types/react"},"text":{}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentDidCatch"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.componentDidCatch","hash":"componentDidCatch.componentDidCatch"},"text":{"comment":"<p>Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.</p>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":646,"character":8}],"parentId":2564}],"inheritedFrom":{"type":"reference","name":"React.Component.componentDidCatch"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"componentDidCatch"},"text":{},"parentId":2301},{"id":2519,"name":"componentDidMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":625,"character":8}],"signatures":[{"id":2520,"name":"componentDidMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called immediately after a component is mounted. Setting state here will trigger re-rendering."}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentDidMount"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.componentDidMount","hash":"componentDidMount.componentDidMount"},"text":{"comment":"<p>Called immediately after a component is mounted. Setting state here will trigger re-rendering.</p>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":625,"character":8}],"parentId":2519}],"inheritedFrom":{"type":"reference","name":"React.Component.componentDidMount"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"componentDidMount"},"text":{},"parentId":2301},{"id":2608,"name":"componentDidUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":688,"character":8}],"signatures":[{"id":2609,"name":"componentDidUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null."}]},"parameters":[{"id":2610,"name":"prevProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reflection","declaration":{"id":2611,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2612,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":23,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2613,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":27,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonClasses","qualifiedName":"ButtonClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2614,"name":"color","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'primary'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":34,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"inherit"},{"type":"literal","value":"secondary"},{"type":"literal","value":"primary"},{"type":"literal","value":"success"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"warning"}]}},{"id":2616,"name":"disableElevation","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", no elevation is used."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":47,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2617,"name":"disableFocusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the  keyboard focus ripple is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":52,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2615,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":42,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2618,"name":"endIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed after the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":56,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2619,"name":"fullWidth","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the button will take up the full width of its container."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":61,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2620,"name":"href","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The URL to link to when the button is clicked.\nIf defined, an "},{"kind":"code","text":"`a`"},{"kind":"text","text":" element will be used as the root node."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":66,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2621,"name":"size","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The size of the component.\n"},{"kind":"code","text":"`small`"},{"kind":"text","text":" is equivalent to the dense button styling."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'medium'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":72,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"small"},{"type":"literal","value":"medium"},{"type":"literal","value":"large"}]}},{"id":2622,"name":"startIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed before the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":76,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2623,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":80,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2624,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The variant to use."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'text'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":85,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"contained"},{"type":"literal","value":"outlined"}]}}],"groups":[{"title":"Properties","children":[2612,2613,2614,2616,2617,2615,2618,2619,2620,2621,2622,2623,2624]}],"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":19,"character":13}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2625,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2635,"name":"LinkComponent","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The component used to render a link when the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" prop is provided."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'a'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ElementType","qualifiedName":"React.ElementType","package":"@types/react"}},{"id":2639,"name":"TouchRippleProps","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Props applied to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":82,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleProps","qualifiedName":"TouchRippleProps","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2626,"name":"action","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref for imperative actions.\nIt currently only supports "},{"kind":"code","text":"`focusVisible()`"},{"kind":"text","text":" action."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":14,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseActions","qualifiedName":"ButtonBaseActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}},{"id":2627,"name":"centerRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripples are centered.\nThey won't start at the cursor interaction position."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":20,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2628,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":24,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2629,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":28,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseClasses","qualifiedName":"ButtonBaseClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2631,"name":"disableRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the "},{"kind":"code","text":"`.Mui-focusVisible`"},{"kind":"text","text":" class."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":41,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2632,"name":"disableTouchRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the touch ripple effect is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":46,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2630,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":33,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2633,"name":"focusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the base button will have a keyboard focus ripple."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":51,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2634,"name":"focusVisibleClassName","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "},{"kind":"code","text":"`focus-visible`"},{"kind":"text","text":" class to other components\nif needed."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":60,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2636,"name":"onFocusVisible","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Callback fired when the component is focused with a keyboard.\nWe trigger a "},{"kind":"code","text":"`onFocus`"},{"kind":"text","text":" callback too."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":70,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"FocusEventHandler","qualifiedName":"React.FocusEventHandler","package":"@types/react"}},{"id":2637,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":74,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2638,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":78,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2640,"name":"touchRippleRef","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref that points to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":86,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleActions","qualifiedName":"TouchRippleActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2635,2639,2626,2627,2628,2629,2631,2632,2630,2633,2634,2636,2637,2638,2640]}],"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":9,"character":13}]}},{"type":"literal","value":"classes"}],"name":"Omit","qualifiedName":"Omit","package":"typescript"},{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"DetailedHTMLProps","qualifiedName":"React.DetailedHTMLProps","package":"@types/react"},{"type":"union","types":[{"type":"literal","value":"key"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"}}]}],"name":"Pick","qualifiedName":"Pick","package":"typescript"},{"type":"reflection","declaration":{"id":2641,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2642,"name":"ref","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":45}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2643,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":91,"character":28}],"signatures":[{"id":2644,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2645,"name":"instance","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"RefObject","qualifiedName":"React.RefObject","package":"@types/react"}]}}],"groups":[{"title":"Properties","children":[2642]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":43}]}}]},{"type":"union","types":[{"type":"literal","value":"children"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"}},{"type":"literal","value":"color"},{"type":"literal","value":"sx"},{"type":"literal","value":"tabIndex"},{"type":"literal","value":"href"},{"type":"literal","value":"disabled"},{"type":"literal","value":"action"},{"type":"literal","value":"size"},{"type":"literal","value":"variant"},{"type":"literal","value":"centerRipple"},{"type":"literal","value":"disableRipple"},{"type":"literal","value":"disableTouchRipple"},{"type":"literal","value":"focusRipple"},{"type":"literal","value":"focusVisibleClassName"},{"type":"literal","value":"LinkComponent"},{"type":"literal","value":"onFocusVisible"},{"type":"literal","value":"TouchRippleProps"},{"type":"literal","value":"touchRippleRef"},{"type":"literal","value":"disableElevation"},{"type":"literal","value":"disableFocusRipple"},{"type":"literal","value":"endIcon"},{"type":"literal","value":"fullWidth"},{"type":"literal","value":"startIcon"}]}],"name":"Omit","qualifiedName":"Omit","package":"typescript"}]}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"text":{}},{"id":2646,"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2647,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"text":{}},{"id":2648,"name":"snapshot","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"any"},"text":{}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentDidUpdate"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.componentDidUpdate","hash":"componentDidUpdate.componentDidUpdate"},"text":{"comment":"<p>Called immediately after updating occurs. Not called for the initial render.</p>\n<p>The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.</p>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":688,"character":8}],"parentId":2608}],"inheritedFrom":{"type":"reference","name":"React.Component.componentDidUpdate"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"componentDidUpdate"},"text":{},"parentId":2301},{"id":2649,"name":"componentWillMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":703,"character":8}],"signatures":[{"id":2650,"name":"componentWillMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before mounting occurs, and before "},{"kind":"code","text":"`Component#render`"},{"kind":"text","text":".\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use componentDidMount or the constructor instead; will stop working in React 17"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentWillMount"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.componentWillMount","hash":"componentWillMount.componentWillMount"},"text":{"comment":"<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n<h5>Deprecated:</h5><p>16.3, use componentDidMount or the constructor instead; will stop working in React 17</p>\n<h5>See:</h5><ul>\n<li><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state</a></li>\n<li><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</a></li>\n</ul>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":703,"character":8}],"parentId":2649}],"inheritedFrom":{"type":"reference","name":"React.Component.componentWillMount"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"componentWillMount"},"text":{},"parentId":2301},{"id":2653,"name":"componentWillReceiveProps","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":732,"character":8}],"signatures":[{"id":2654,"name":"componentWillReceiveProps","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling "},{"kind":"code","text":"`Component#setState`"},{"kind":"text","text":" generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use static getDerivedStateFromProps instead; will stop working in React 17"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"parameters":[{"id":2655,"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reflection","declaration":{"id":2656,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2657,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":23,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2658,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":27,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonClasses","qualifiedName":"ButtonClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2659,"name":"color","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'primary'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":34,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"inherit"},{"type":"literal","value":"secondary"},{"type":"literal","value":"primary"},{"type":"literal","value":"success"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"warning"}]}},{"id":2661,"name":"disableElevation","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", no elevation is used."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":47,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2662,"name":"disableFocusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the  keyboard focus ripple is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":52,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2660,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":42,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2663,"name":"endIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed after the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":56,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2664,"name":"fullWidth","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the button will take up the full width of its container."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":61,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2665,"name":"href","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The URL to link to when the button is clicked.\nIf defined, an "},{"kind":"code","text":"`a`"},{"kind":"text","text":" element will be used as the root node."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":66,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2666,"name":"size","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The size of the component.\n"},{"kind":"code","text":"`small`"},{"kind":"text","text":" is equivalent to the dense button styling."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'medium'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":72,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"small"},{"type":"literal","value":"medium"},{"type":"literal","value":"large"}]}},{"id":2667,"name":"startIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed before the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":76,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2668,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":80,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2669,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The variant to use."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'text'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":85,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"contained"},{"type":"literal","value":"outlined"}]}}],"groups":[{"title":"Properties","children":[2657,2658,2659,2661,2662,2660,2663,2664,2665,2666,2667,2668,2669]}],"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":19,"character":13}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2670,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2680,"name":"LinkComponent","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The component used to render a link when the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" prop is provided."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'a'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ElementType","qualifiedName":"React.ElementType","package":"@types/react"}},{"id":2684,"name":"TouchRippleProps","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Props applied to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":82,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleProps","qualifiedName":"TouchRippleProps","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2671,"name":"action","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref for imperative actions.\nIt currently only supports "},{"kind":"code","text":"`focusVisible()`"},{"kind":"text","text":" action."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":14,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseActions","qualifiedName":"ButtonBaseActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}},{"id":2672,"name":"centerRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripples are centered.\nThey won't start at the cursor interaction position."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":20,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2673,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":24,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2674,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":28,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseClasses","qualifiedName":"ButtonBaseClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2676,"name":"disableRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the "},{"kind":"code","text":"`.Mui-focusVisible`"},{"kind":"text","text":" class."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":41,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2677,"name":"disableTouchRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the touch ripple effect is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":46,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2675,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":33,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2678,"name":"focusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the base button will have a keyboard focus ripple."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":51,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2679,"name":"focusVisibleClassName","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "},{"kind":"code","text":"`focus-visible`"},{"kind":"text","text":" class to other components\nif needed."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":60,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2681,"name":"onFocusVisible","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Callback fired when the component is focused with a keyboard.\nWe trigger a "},{"kind":"code","text":"`onFocus`"},{"kind":"text","text":" callback too."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":70,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"FocusEventHandler","qualifiedName":"React.FocusEventHandler","package":"@types/react"}},{"id":2682,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":74,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2683,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":78,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2685,"name":"touchRippleRef","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref that points to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":86,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleActions","qualifiedName":"TouchRippleActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2680,2684,2671,2672,2673,2674,2676,2677,2675,2678,2679,2681,2682,2683,2685]}],"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":9,"character":13}]}},{"type":"literal","value":"classes"}],"name":"Omit","qualifiedName":"Omit","package":"typescript"},{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"DetailedHTMLProps","qualifiedName":"React.DetailedHTMLProps","package":"@types/react"},{"type":"union","types":[{"type":"literal","value":"key"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"}}]}],"name":"Pick","qualifiedName":"Pick","package":"typescript"},{"type":"reflection","declaration":{"id":2686,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2687,"name":"ref","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":45}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2688,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":91,"character":28}],"signatures":[{"id":2689,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2690,"name":"instance","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"RefObject","qualifiedName":"React.RefObject","package":"@types/react"}]}}],"groups":[{"title":"Properties","children":[2687]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":43}]}}]},{"type":"union","types":[{"type":"literal","value":"children"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"}},{"type":"literal","value":"color"},{"type":"literal","value":"sx"},{"type":"literal","value":"tabIndex"},{"type":"literal","value":"href"},{"type":"literal","value":"disabled"},{"type":"literal","value":"action"},{"type":"literal","value":"size"},{"type":"literal","value":"variant"},{"type":"literal","value":"centerRipple"},{"type":"literal","value":"disableRipple"},{"type":"literal","value":"disableTouchRipple"},{"type":"literal","value":"focusRipple"},{"type":"literal","value":"focusVisibleClassName"},{"type":"literal","value":"LinkComponent"},{"type":"literal","value":"onFocusVisible"},{"type":"literal","value":"TouchRippleProps"},{"type":"literal","value":"touchRippleRef"},{"type":"literal","value":"disableElevation"},{"type":"literal","value":"disableFocusRipple"},{"type":"literal","value":"endIcon"},{"type":"literal","value":"fullWidth"},{"type":"literal","value":"startIcon"}]}],"name":"Omit","qualifiedName":"Omit","package":"typescript"}]}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"text":{}},{"id":2691,"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"},"text":{}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentWillReceiveProps"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.componentWillReceiveProps","hash":"componentWillReceiveProps.componentWillReceiveProps"},"text":{"comment":"<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n<h5>Deprecated:</h5><p>16.3, use static getDerivedStateFromProps instead; will stop working in React 17</p>\n<h5>See:</h5><ul>\n<li><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props</a></li>\n<li><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</a></li>\n</ul>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":732,"character":8}],"parentId":2653}],"inheritedFrom":{"type":"reference","name":"React.Component.componentWillReceiveProps"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"componentWillReceiveProps"},"text":{},"parentId":2301},{"id":2562,"name":"componentWillUnmount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":641,"character":8}],"signatures":[{"id":2563,"name":"componentWillUnmount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in "},{"kind":"code","text":"`componentDidMount`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentWillUnmount"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.componentWillUnmount","hash":"componentWillUnmount.componentWillUnmount"},"text":{"comment":"<p>Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in <code>componentDidMount</code>.</p>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":641,"character":8}],"parentId":2562}],"inheritedFrom":{"type":"reference","name":"React.Component.componentWillUnmount"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"componentWillUnmount"},"text":{},"parentId":2301},{"id":2731,"name":"componentWillUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":762,"character":8}],"signatures":[{"id":2732,"name":"componentWillUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call "},{"kind":"code","text":"`Component#setState`"},{"kind":"text","text":" here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"parameters":[{"id":2733,"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reflection","declaration":{"id":2734,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2735,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":23,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2736,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":27,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonClasses","qualifiedName":"ButtonClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2737,"name":"color","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'primary'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":34,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"inherit"},{"type":"literal","value":"secondary"},{"type":"literal","value":"primary"},{"type":"literal","value":"success"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"warning"}]}},{"id":2739,"name":"disableElevation","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", no elevation is used."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":47,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2740,"name":"disableFocusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the  keyboard focus ripple is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":52,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2738,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":42,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2741,"name":"endIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed after the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":56,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2742,"name":"fullWidth","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the button will take up the full width of its container."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":61,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2743,"name":"href","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The URL to link to when the button is clicked.\nIf defined, an "},{"kind":"code","text":"`a`"},{"kind":"text","text":" element will be used as the root node."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":66,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2744,"name":"size","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The size of the component.\n"},{"kind":"code","text":"`small`"},{"kind":"text","text":" is equivalent to the dense button styling."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'medium'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":72,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"small"},{"type":"literal","value":"medium"},{"type":"literal","value":"large"}]}},{"id":2745,"name":"startIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed before the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":76,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2746,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":80,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2747,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The variant to use."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'text'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":85,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"contained"},{"type":"literal","value":"outlined"}]}}],"groups":[{"title":"Properties","children":[2735,2736,2737,2739,2740,2738,2741,2742,2743,2744,2745,2746,2747]}],"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":19,"character":13}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2748,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2758,"name":"LinkComponent","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The component used to render a link when the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" prop is provided."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'a'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ElementType","qualifiedName":"React.ElementType","package":"@types/react"}},{"id":2762,"name":"TouchRippleProps","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Props applied to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":82,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleProps","qualifiedName":"TouchRippleProps","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2749,"name":"action","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref for imperative actions.\nIt currently only supports "},{"kind":"code","text":"`focusVisible()`"},{"kind":"text","text":" action."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":14,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseActions","qualifiedName":"ButtonBaseActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}},{"id":2750,"name":"centerRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripples are centered.\nThey won't start at the cursor interaction position."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":20,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2751,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":24,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2752,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":28,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseClasses","qualifiedName":"ButtonBaseClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2754,"name":"disableRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the "},{"kind":"code","text":"`.Mui-focusVisible`"},{"kind":"text","text":" class."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":41,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2755,"name":"disableTouchRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the touch ripple effect is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":46,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2753,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":33,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2756,"name":"focusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the base button will have a keyboard focus ripple."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":51,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2757,"name":"focusVisibleClassName","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "},{"kind":"code","text":"`focus-visible`"},{"kind":"text","text":" class to other components\nif needed."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":60,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2759,"name":"onFocusVisible","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Callback fired when the component is focused with a keyboard.\nWe trigger a "},{"kind":"code","text":"`onFocus`"},{"kind":"text","text":" callback too."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":70,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"FocusEventHandler","qualifiedName":"React.FocusEventHandler","package":"@types/react"}},{"id":2760,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":74,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2761,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":78,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2763,"name":"touchRippleRef","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref that points to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":86,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleActions","qualifiedName":"TouchRippleActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2758,2762,2749,2750,2751,2752,2754,2755,2753,2756,2757,2759,2760,2761,2763]}],"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":9,"character":13}]}},{"type":"literal","value":"classes"}],"name":"Omit","qualifiedName":"Omit","package":"typescript"},{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"DetailedHTMLProps","qualifiedName":"React.DetailedHTMLProps","package":"@types/react"},{"type":"union","types":[{"type":"literal","value":"key"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"}}]}],"name":"Pick","qualifiedName":"Pick","package":"typescript"},{"type":"reflection","declaration":{"id":2764,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2765,"name":"ref","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":45}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2766,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":91,"character":28}],"signatures":[{"id":2767,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2768,"name":"instance","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"RefObject","qualifiedName":"React.RefObject","package":"@types/react"}]}}],"groups":[{"title":"Properties","children":[2765]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":43}]}}]},{"type":"union","types":[{"type":"literal","value":"children"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"}},{"type":"literal","value":"color"},{"type":"literal","value":"sx"},{"type":"literal","value":"tabIndex"},{"type":"literal","value":"href"},{"type":"literal","value":"disabled"},{"type":"literal","value":"action"},{"type":"literal","value":"size"},{"type":"literal","value":"variant"},{"type":"literal","value":"centerRipple"},{"type":"literal","value":"disableRipple"},{"type":"literal","value":"disableTouchRipple"},{"type":"literal","value":"focusRipple"},{"type":"literal","value":"focusVisibleClassName"},{"type":"literal","value":"LinkComponent"},{"type":"literal","value":"onFocusVisible"},{"type":"literal","value":"TouchRippleProps"},{"type":"literal","value":"touchRippleRef"},{"type":"literal","value":"disableElevation"},{"type":"literal","value":"disableFocusRipple"},{"type":"literal","value":"endIcon"},{"type":"literal","value":"fullWidth"},{"type":"literal","value":"startIcon"}]}],"name":"Omit","qualifiedName":"Omit","package":"typescript"}]}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"text":{}},{"id":2769,"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2770,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"text":{}},{"id":2771,"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"},"text":{}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.componentWillUpdate"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.componentWillUpdate","hash":"componentWillUpdate.componentWillUpdate"},"text":{"comment":"<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n<h5>Deprecated:</h5><p>16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17</p>\n<h5>See:</h5><ul>\n<li><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update</a></li>\n<li><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path</a></li>\n</ul>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":762,"character":8}],"parentId":2731}],"inheritedFrom":{"type":"reference","name":"React.Component.componentWillUpdate"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"componentWillUpdate"},"text":{},"parentId":2301},{"id":2470,"name":"forceUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":496,"character":8}],"signatures":[{"id":2471,"name":"forceUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"parameters":[{"id":2472,"name":"callback","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"id":2473,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":496,"character":31}],"signatures":[{"id":2474,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"void"}}]}},"text":{}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.forceUpdate"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.forceUpdate","hash":"forceUpdate.forceUpdate"},"text":{},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":496,"character":8}],"parentId":2470}],"inheritedFrom":{"type":"reference","name":"React.Component.forceUpdate"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"forceUpdate"},"text":{},"parentId":2301},{"id":2568,"name":"getSnapshotBeforeUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":682,"character":8}],"signatures":[{"id":2569,"name":"getSnapshotBeforeUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Runs before React applies the result of "},{"kind":"code","text":"`render`"},{"kind":"text","text":" to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before "},{"kind":"code","text":"`render`"},{"kind":"text","text":" causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running."}]},"parameters":[{"id":2570,"name":"prevProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reflection","declaration":{"id":2571,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2572,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":23,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2573,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":27,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonClasses","qualifiedName":"ButtonClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2574,"name":"color","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'primary'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":34,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"inherit"},{"type":"literal","value":"secondary"},{"type":"literal","value":"primary"},{"type":"literal","value":"success"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"warning"}]}},{"id":2576,"name":"disableElevation","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", no elevation is used."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":47,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2577,"name":"disableFocusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the  keyboard focus ripple is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":52,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2575,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":42,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2578,"name":"endIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed after the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":56,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2579,"name":"fullWidth","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the button will take up the full width of its container."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":61,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2580,"name":"href","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The URL to link to when the button is clicked.\nIf defined, an "},{"kind":"code","text":"`a`"},{"kind":"text","text":" element will be used as the root node."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":66,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2581,"name":"size","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The size of the component.\n"},{"kind":"code","text":"`small`"},{"kind":"text","text":" is equivalent to the dense button styling."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'medium'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":72,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"small"},{"type":"literal","value":"medium"},{"type":"literal","value":"large"}]}},{"id":2582,"name":"startIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed before the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":76,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2583,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":80,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2584,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The variant to use."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'text'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":85,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"contained"},{"type":"literal","value":"outlined"}]}}],"groups":[{"title":"Properties","children":[2572,2573,2574,2576,2577,2575,2578,2579,2580,2581,2582,2583,2584]}],"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":19,"character":13}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2585,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2595,"name":"LinkComponent","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The component used to render a link when the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" prop is provided."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'a'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ElementType","qualifiedName":"React.ElementType","package":"@types/react"}},{"id":2599,"name":"TouchRippleProps","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Props applied to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":82,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleProps","qualifiedName":"TouchRippleProps","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2586,"name":"action","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref for imperative actions.\nIt currently only supports "},{"kind":"code","text":"`focusVisible()`"},{"kind":"text","text":" action."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":14,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseActions","qualifiedName":"ButtonBaseActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}},{"id":2587,"name":"centerRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripples are centered.\nThey won't start at the cursor interaction position."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":20,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2588,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":24,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2589,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":28,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseClasses","qualifiedName":"ButtonBaseClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2591,"name":"disableRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the "},{"kind":"code","text":"`.Mui-focusVisible`"},{"kind":"text","text":" class."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":41,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2592,"name":"disableTouchRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the touch ripple effect is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":46,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2590,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":33,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2593,"name":"focusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the base button will have a keyboard focus ripple."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":51,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2594,"name":"focusVisibleClassName","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "},{"kind":"code","text":"`focus-visible`"},{"kind":"text","text":" class to other components\nif needed."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":60,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2596,"name":"onFocusVisible","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Callback fired when the component is focused with a keyboard.\nWe trigger a "},{"kind":"code","text":"`onFocus`"},{"kind":"text","text":" callback too."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":70,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"FocusEventHandler","qualifiedName":"React.FocusEventHandler","package":"@types/react"}},{"id":2597,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":74,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2598,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":78,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2600,"name":"touchRippleRef","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref that points to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":86,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleActions","qualifiedName":"TouchRippleActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2595,2599,2586,2587,2588,2589,2591,2592,2590,2593,2594,2596,2597,2598,2600]}],"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":9,"character":13}]}},{"type":"literal","value":"classes"}],"name":"Omit","qualifiedName":"Omit","package":"typescript"},{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"DetailedHTMLProps","qualifiedName":"React.DetailedHTMLProps","package":"@types/react"},{"type":"union","types":[{"type":"literal","value":"key"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"}}]}],"name":"Pick","qualifiedName":"Pick","package":"typescript"},{"type":"reflection","declaration":{"id":2601,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2602,"name":"ref","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":45}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2603,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":91,"character":28}],"signatures":[{"id":2604,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2605,"name":"instance","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"RefObject","qualifiedName":"React.RefObject","package":"@types/react"}]}}],"groups":[{"title":"Properties","children":[2602]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":43}]}}]},{"type":"union","types":[{"type":"literal","value":"children"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"}},{"type":"literal","value":"color"},{"type":"literal","value":"sx"},{"type":"literal","value":"tabIndex"},{"type":"literal","value":"href"},{"type":"literal","value":"disabled"},{"type":"literal","value":"action"},{"type":"literal","value":"size"},{"type":"literal","value":"variant"},{"type":"literal","value":"centerRipple"},{"type":"literal","value":"disableRipple"},{"type":"literal","value":"disableTouchRipple"},{"type":"literal","value":"focusRipple"},{"type":"literal","value":"focusVisibleClassName"},{"type":"literal","value":"LinkComponent"},{"type":"literal","value":"onFocusVisible"},{"type":"literal","value":"TouchRippleProps"},{"type":"literal","value":"touchRippleRef"},{"type":"literal","value":"disableElevation"},{"type":"literal","value":"disableFocusRipple"},{"type":"literal","value":"endIcon"},{"type":"literal","value":"fullWidth"},{"type":"literal","value":"startIcon"}]}],"name":"Omit","qualifiedName":"Omit","package":"typescript"}]}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"text":{}},{"id":2606,"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2607,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"text":{}}],"type":{"type":"intrinsic","name":"any"},"inheritedFrom":{"type":"reference","name":"React.Component.getSnapshotBeforeUpdate"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.getSnapshotBeforeUpdate","hash":"getSnapshotBeforeUpdate.getSnapshotBeforeUpdate"},"text":{"comment":"<p>Runs before React applies the result of <code>render</code> to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before <code>render</code> causes changes to it.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.</p>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":682,"character":8}],"parentId":2568}],"inheritedFrom":{"type":"reference","name":"React.Component.getSnapshotBeforeUpdate"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"getSnapshotBeforeUpdate"},"text":{},"parentId":2301},{"id":2416,"name":"render","kind":2048,"kindString":"Method","flags":{"isOverride":true},"sources":[{"fileName":"src/gui/fields/ActionButton.tsx","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/src/gui/fields/ActionButton.tsx","line":37,"character":2,"url":"https://github.com/FAIMS/FAIMS3/blob/a300d3b/src/gui/fields/ActionButton.tsx#L37"}],"signatures":[{"id":2417,"name":"render","kind":4096,"kindString":"Call signature","flags":{"isOverride":true},"type":{"type":"reference","name":"Element","qualifiedName":"global.JSX.Element","package":"@types/react"},"overwrites":{"type":"reference","name":"React.Component.render"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.render","hash":"render.render"},"text":{},"sources":[{"fileName":"src/gui/fields/ActionButton.tsx","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/src/gui/fields/ActionButton.tsx","line":37,"character":2,"url":"https://github.com/FAIMS/FAIMS3/blob/a300d3b/src/gui/fields/ActionButton.tsx#L37"}],"parentId":2416}],"overwrites":{"type":"reference","name":"React.Component.render"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"render"},"text":{},"parentId":2301},{"id":2419,"name":"setState","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":491,"character":8}],"signatures":[{"id":2420,"name":"setState","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"typeParameter":[{"id":2421,"name":"K","kind":131072,"kindString":"Type parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"never"}}],"parameters":[{"id":2422,"name":"state","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2423,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reflection","declaration":{"id":2424,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":492,"character":20}],"signatures":[{"id":2425,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2426,"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2427,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"id":2428,"name":"props","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reflection","declaration":{"id":2429,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2430,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":23,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2431,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":27,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonClasses","qualifiedName":"ButtonClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2432,"name":"color","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'primary'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":34,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"inherit"},{"type":"literal","value":"secondary"},{"type":"literal","value":"primary"},{"type":"literal","value":"success"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"warning"}]}},{"id":2434,"name":"disableElevation","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", no elevation is used."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":47,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2435,"name":"disableFocusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the  keyboard focus ripple is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":52,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2433,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":42,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2436,"name":"endIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed after the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":56,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2437,"name":"fullWidth","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the button will take up the full width of its container."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":61,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2438,"name":"href","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The URL to link to when the button is clicked.\nIf defined, an "},{"kind":"code","text":"`a`"},{"kind":"text","text":" element will be used as the root node."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":66,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2439,"name":"size","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The size of the component.\n"},{"kind":"code","text":"`small`"},{"kind":"text","text":" is equivalent to the dense button styling."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'medium'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":72,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"small"},{"type":"literal","value":"medium"},{"type":"literal","value":"large"}]}},{"id":2440,"name":"startIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed before the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":76,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2441,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":80,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2442,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The variant to use."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'text'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":85,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"contained"},{"type":"literal","value":"outlined"}]}}],"groups":[{"title":"Properties","children":[2430,2431,2432,2434,2435,2433,2436,2437,2438,2439,2440,2441,2442]}],"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":19,"character":13}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2443,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2453,"name":"LinkComponent","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The component used to render a link when the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" prop is provided."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'a'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ElementType","qualifiedName":"React.ElementType","package":"@types/react"}},{"id":2457,"name":"TouchRippleProps","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Props applied to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":82,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleProps","qualifiedName":"TouchRippleProps","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2444,"name":"action","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref for imperative actions.\nIt currently only supports "},{"kind":"code","text":"`focusVisible()`"},{"kind":"text","text":" action."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":14,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseActions","qualifiedName":"ButtonBaseActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}},{"id":2445,"name":"centerRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripples are centered.\nThey won't start at the cursor interaction position."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":20,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2446,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":24,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2447,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":28,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseClasses","qualifiedName":"ButtonBaseClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2449,"name":"disableRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the "},{"kind":"code","text":"`.Mui-focusVisible`"},{"kind":"text","text":" class."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":41,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2450,"name":"disableTouchRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the touch ripple effect is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":46,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2448,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":33,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2451,"name":"focusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the base button will have a keyboard focus ripple."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":51,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2452,"name":"focusVisibleClassName","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "},{"kind":"code","text":"`focus-visible`"},{"kind":"text","text":" class to other components\nif needed."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":60,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2454,"name":"onFocusVisible","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Callback fired when the component is focused with a keyboard.\nWe trigger a "},{"kind":"code","text":"`onFocus`"},{"kind":"text","text":" callback too."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":70,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"FocusEventHandler","qualifiedName":"React.FocusEventHandler","package":"@types/react"}},{"id":2455,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":74,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2456,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":78,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2458,"name":"touchRippleRef","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref that points to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":86,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleActions","qualifiedName":"TouchRippleActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2453,2457,2444,2445,2446,2447,2449,2450,2448,2451,2452,2454,2455,2456,2458]}],"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":9,"character":13}]}},{"type":"literal","value":"classes"}],"name":"Omit","qualifiedName":"Omit","package":"typescript"},{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"DetailedHTMLProps","qualifiedName":"React.DetailedHTMLProps","package":"@types/react"},{"type":"union","types":[{"type":"literal","value":"key"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"}}]}],"name":"Pick","qualifiedName":"Pick","package":"typescript"},{"type":"reflection","declaration":{"id":2459,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2460,"name":"ref","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":45}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2461,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":91,"character":28}],"signatures":[{"id":2462,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2463,"name":"instance","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"RefObject","qualifiedName":"React.RefObject","package":"@types/react"}]}}],"groups":[{"title":"Properties","children":[2460]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":43}]}}]},{"type":"union","types":[{"type":"literal","value":"children"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"}},{"type":"literal","value":"color"},{"type":"literal","value":"sx"},{"type":"literal","value":"tabIndex"},{"type":"literal","value":"href"},{"type":"literal","value":"disabled"},{"type":"literal","value":"action"},{"type":"literal","value":"size"},{"type":"literal","value":"variant"},{"type":"literal","value":"centerRipple"},{"type":"literal","value":"disableRipple"},{"type":"literal","value":"disableTouchRipple"},{"type":"literal","value":"focusRipple"},{"type":"literal","value":"focusVisibleClassName"},{"type":"literal","value":"LinkComponent"},{"type":"literal","value":"onFocusVisible"},{"type":"literal","value":"TouchRippleProps"},{"type":"literal","value":"touchRippleRef"},{"type":"literal","value":"disableElevation"},{"type":"literal","value":"disableFocusRipple"},{"type":"literal","value":"endIcon"},{"type":"literal","value":"fullWidth"},{"type":"literal","value":"startIcon"}]}],"name":"Omit","qualifiedName":"Omit","package":"typescript"}]}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2464,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2465,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","id":1168,"name":"K","qualifiedName":"K","package":"@types/react"}],"name":"Pick","qualifiedName":"Pick","package":"typescript"}]}}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2466,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","id":1168,"name":"K","qualifiedName":"K","package":"@types/react"}],"name":"Pick","qualifiedName":"Pick","package":"typescript"}]},"text":{}},{"id":2467,"name":"callback","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"id":2468,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":493,"character":23}],"signatures":[{"id":2469,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"void"}}]}},"text":{}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.Component.setState"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.setState","hash":"setState.setState"},"text":{},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":491,"character":8}],"parentId":2419}],"inheritedFrom":{"type":"reference","name":"React.Component.setState"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"setState"},"text":{},"parentId":2301},{"id":2521,"name":"shouldComponentUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":636,"character":8}],"signatures":[{"id":2522,"name":"shouldComponentUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called to determine whether the change in props and state should trigger a re-render.\n\n"},{"kind":"code","text":"`Component`"},{"kind":"text","text":" always returns true.\n"},{"kind":"code","text":"`PureComponent`"},{"kind":"text","text":" implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, "},{"kind":"code","text":"`Component#render`"},{"kind":"text","text":", "},{"kind":"code","text":"`componentWillUpdate`"},{"kind":"text","text":"\nand "},{"kind":"code","text":"`componentDidUpdate`"},{"kind":"text","text":" will not be called."}]},"parameters":[{"id":2523,"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reflection","declaration":{"id":2524,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2525,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":23,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2526,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":27,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonClasses","qualifiedName":"ButtonClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2527,"name":"color","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The color of the component.\nIt supports both default and custom theme colors, which can be added as shown in the\n[palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'primary'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":34,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"inherit"},{"type":"literal","value":"secondary"},{"type":"literal","value":"primary"},{"type":"literal","value":"success"},{"type":"literal","value":"error"},{"type":"literal","value":"info"},{"type":"literal","value":"warning"}]}},{"id":2529,"name":"disableElevation","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", no elevation is used."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":47,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2530,"name":"disableFocusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the  keyboard focus ripple is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":52,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2528,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":42,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2531,"name":"endIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed after the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":56,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2532,"name":"fullWidth","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the button will take up the full width of its container."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":61,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2533,"name":"href","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The URL to link to when the button is clicked.\nIf defined, an "},{"kind":"code","text":"`a`"},{"kind":"text","text":" element will be used as the root node."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":66,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2534,"name":"size","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The size of the component.\n"},{"kind":"code","text":"`small`"},{"kind":"text","text":" is equivalent to the dense button styling."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'medium'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":72,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"small"},{"type":"literal","value":"medium"},{"type":"literal","value":"large"}]}},{"id":2535,"name":"startIcon","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Element placed before the children."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":76,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2536,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":80,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2537,"name":"variant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The variant to use."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'text'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":85,"character":4}],"type":{"type":"union","types":[{"type":"literal","value":"text"},{"type":"literal","value":"contained"},{"type":"literal","value":"outlined"}]}}],"groups":[{"title":"Properties","children":[2525,2526,2527,2529,2530,2528,2531,2532,2533,2534,2535,2536,2537]}],"sources":[{"fileName":"node_modules/@mui/material/Button/Button.d.ts","line":19,"character":13}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2538,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2548,"name":"LinkComponent","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The component used to render a link when the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" prop is provided."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'a'"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":65,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ElementType","qualifiedName":"React.ElementType","package":"@types/react"}},{"id":2552,"name":"TouchRippleProps","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Props applied to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":82,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleProps","qualifiedName":"TouchRippleProps","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2539,"name":"action","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref for imperative actions.\nIt currently only supports "},{"kind":"code","text":"`focusVisible()`"},{"kind":"text","text":" action."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":14,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseActions","qualifiedName":"ButtonBaseActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}},{"id":2540,"name":"centerRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripples are centered.\nThey won't start at the cursor interaction position."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":20,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2541,"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The content of the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":24,"character":4}],"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"}},{"id":2542,"name":"classes","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Override or extend the styles applied to the component."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":28,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ButtonBaseClasses","qualifiedName":"ButtonBaseClasses","package":"@mui/material"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"}},{"id":2544,"name":"disableRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the ripple effect is disabled.\n\n⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\nto highlight the element by applying separate styles with the "},{"kind":"code","text":"`.Mui-focusVisible`"},{"kind":"text","text":" class."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":41,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2545,"name":"disableTouchRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the touch ripple effect is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":46,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2543,"name":"disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the component is disabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":33,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2546,"name":"focusRipple","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the base button will have a keyboard focus ripple."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":51,"character":4}],"type":{"type":"intrinsic","name":"boolean"}},{"id":2547,"name":"focusVisibleClassName","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This prop can help identify which element has keyboard focus.\nThe class name will be applied when the element gains the focus through keyboard interaction.\nIt's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\nThe rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\nA [polyfill can be used](https://github.com/WICG/focus-visible) to apply a "},{"kind":"code","text":"`focus-visible`"},{"kind":"text","text":" class to other components\nif needed."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":60,"character":4}],"type":{"type":"intrinsic","name":"string"}},{"id":2549,"name":"onFocusVisible","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Callback fired when the component is focused with a keyboard.\nWe trigger a "},{"kind":"code","text":"`onFocus`"},{"kind":"text","text":" callback too."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":70,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"FocusEventHandler","qualifiedName":"React.FocusEventHandler","package":"@types/react"}},{"id":2550,"name":"sx","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The system prop that allows defining system overrides as well as additional CSS styles."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":74,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Theme","qualifiedName":"Theme","package":"@mui/material"}],"name":"SxProps","qualifiedName":"SxProps","package":"@mui/system"}},{"id":2551,"name":"tabIndex","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":78,"character":4}],"type":{"type":"intrinsic","name":"number"}},{"id":2553,"name":"touchRippleRef","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ref that points to the "},{"kind":"code","text":"`TouchRipple`"},{"kind":"text","text":" element."}]},"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":86,"character":4}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TouchRippleActions","qualifiedName":"TouchRippleActions","package":"@mui/material"}],"name":"Ref","qualifiedName":"React.Ref","package":"@types/react"}}],"groups":[{"title":"Properties","children":[2548,2552,2539,2540,2541,2542,2544,2545,2543,2546,2547,2549,2550,2551,2553]}],"sources":[{"fileName":"node_modules/@mui/material/ButtonBase/ButtonBase.d.ts","line":9,"character":13}]}},{"type":"literal","value":"classes"}],"name":"Omit","qualifiedName":"Omit","package":"typescript"},{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"},{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"DetailedHTMLProps","qualifiedName":"React.DetailedHTMLProps","package":"@types/react"},{"type":"union","types":[{"type":"literal","value":"key"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"ButtonHTMLAttributes","qualifiedName":"React.ButtonHTMLAttributes","package":"@types/react"}}]}],"name":"Pick","qualifiedName":"Pick","package":"typescript"},{"type":"reflection","declaration":{"id":2554,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"children":[{"id":2555,"name":"ref","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":45}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"id":2556,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":91,"character":28}],"signatures":[{"id":2557,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":2558,"name":"instance","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}]}}],"type":{"type":"intrinsic","name":"void"}}]}},{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLButtonElement","qualifiedName":"HTMLButtonElement","package":"typescript"}],"name":"RefObject","qualifiedName":"React.RefObject","package":"@types/react"}]}}],"groups":[{"title":"Properties","children":[2555]}],"sources":[{"fileName":"node_modules/@types/react/index.d.ts","line":824,"character":43}]}}]},{"type":"union","types":[{"type":"literal","value":"children"},{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"CommonProps","qualifiedName":"CommonProps","package":"@mui/material"}},{"type":"literal","value":"color"},{"type":"literal","value":"sx"},{"type":"literal","value":"tabIndex"},{"type":"literal","value":"href"},{"type":"literal","value":"disabled"},{"type":"literal","value":"action"},{"type":"literal","value":"size"},{"type":"literal","value":"variant"},{"type":"literal","value":"centerRipple"},{"type":"literal","value":"disableRipple"},{"type":"literal","value":"disableTouchRipple"},{"type":"literal","value":"focusRipple"},{"type":"literal","value":"focusVisibleClassName"},{"type":"literal","value":"LinkComponent"},{"type":"literal","value":"onFocusVisible"},{"type":"literal","value":"TouchRippleProps"},{"type":"literal","value":"touchRippleRef"},{"type":"literal","value":"disableElevation"},{"type":"literal","value":"disableFocusRipple"},{"type":"literal","value":"endIcon"},{"type":"literal","value":"fullWidth"},{"type":"literal","value":"startIcon"}]}],"name":"Omit","qualifiedName":"Omit","package":"typescript"}]}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"text":{}},{"id":2559,"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"id":2560,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"text":{}},{"id":2561,"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"},"text":{}}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"React.Component.shouldComponentUpdate"},"is":{"declaration":false},"location":{"query":"gui/fields/ActionButton.ActionButton.Method.shouldComponentUpdate","hash":"shouldComponentUpdate.shouldComponentUpdate"},"text":{"comment":"<p>Called to determine whether the change in props and state should trigger a re-render.</p>\n<p><code>Component</code> always returns true.\n<code>PureComponent</code> implements a shallow comparison on props and state and returns true if any\nprops or states have changed.</p>\n<p>If false is returned, <code>Component#render</code>, <code>componentWillUpdate</code>\nand <code>componentDidUpdate</code> will not be called.</p>\n"},"sources":[{"fileName":"node_modules/@types/react/index.d.ts","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/node_modules/@types/react/index.d.ts","line":636,"character":8}],"parentId":2521}],"inheritedFrom":{"type":"reference","name":"React.Component.shouldComponentUpdate"},"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":"shouldComponentUpdate"},"text":{},"parentId":2301}],"groups":[{"title":"Constructors","children":[2303]},{"title":"Properties","children":[2418,2475,2515,2513,2302]},{"title":"Methods","children":[2651,2692,2772,2414,2564,2519,2608,2649,2653,2562,2731,2470,2568,2416,2419,2521]}],"sources":[{"fileName":"src/gui/fields/ActionButton.tsx","fullFileName":"/home/runner/work/FAIMS3/FAIMS3/src/gui/fields/ActionButton.tsx","line":31,"character":13,"url":"https://github.com/FAIMS/FAIMS3/blob/a300d3b/src/gui/fields/ActionButton.tsx#L31"}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","name":"FieldProps","qualifiedName":"FieldProps","package":"formik"},{"type":"reference","name":"Props"},{"type":"reference","name":"ButtonProps","qualifiedName":"ButtonProps","package":"@mui/material"}]}],"name":"Component","qualifiedName":"React.Component","package":"@types/react"}],"is":{"declaration":true},"location":{"query":"gui/fields/ActionButton.Class.ActionButton","hash":""},"text":{},"parentId":2300,"hierarchy":[{"name":"Component<FieldProps & Props & ButtonProps>","children":[{"name":"ActionButton","isTarget":true,"linkId":"2301"}]}]}
