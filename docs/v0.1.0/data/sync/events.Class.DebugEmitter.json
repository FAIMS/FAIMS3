{"id":5600,"name":"DebugEmitter","kind":128,"kindString":"Class","flags":{},"children":[{"id":5631,"name":"constructor","kind":512,"kindString":"Constructor","flags":{"isOverride":true},"sources":[{"fileName":"src/sync/events.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/src/sync/events.ts","line":30,"character":2,"url":"https://github.com/FAIMS/FAIMS3/blob/1c1db95f/src/sync/events.ts#L30"}],"signatures":[{"id":5632,"name":"constructor","kind":16384,"kindString":"Constructor signature","flags":{"isOverride":true},"parameters":[{"id":5633,"name":"opts","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"id":5634,"name":"__type","kind":65536,"kindString":"Type literal","flags":{},"children":[{"id":5635,"name":"captureRejections","kind":1024,"kindString":"Property","flags":{"isOptional":true},"sources":[{"fileName":"src/sync/events.ts","line":30,"character":22,"url":"https://github.com/FAIMS/FAIMS3/blob/1c1db95f/src/sync/events.ts#L30"}],"type":{"type":"intrinsic","name":"boolean"}}],"groups":[{"title":"Properties","children":[5635]}],"sources":[{"fileName":"src/sync/events.ts","line":30,"character":21,"url":"https://github.com/FAIMS/FAIMS3/blob/1c1db95f/src/sync/events.ts#L30"}]}},"text":{}}],"type":{"type":"reference","id":5600,"name":"DebugEmitter"},"overwrites":{"type":"reference","name":"EventEmitter.constructor"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Constructor.constructor","hash":"constructor.new DebugEmitter"},"text":{},"sources":[{"fileName":"src/sync/events.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/src/sync/events.ts","line":30,"character":2,"url":"https://github.com/FAIMS/FAIMS3/blob/1c1db95f/src/sync/events.ts#L30"}],"parentId":5631}],"overwrites":{"type":"reference","name":"EventEmitter.constructor"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"constructor"},"text":{},"parentId":5600},{"id":5628,"name":"captureRejectionSymbol","kind":1024,"kindString":"Property","flags":{"isStatic":true,"isExternal":true,"isReadonly":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":291,"character":24}],"type":{"type":"query","queryType":{"type":"reference","id":5628,"name":"captureRejectionSymbol","qualifiedName":"EventEmitter.captureRejectionSymbol","package":"@types/node"}},"inheritedFrom":{"type":"reference","name":"EventEmitter.captureRejectionSymbol"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"captureRejectionSymbol"},"text":{},"parentId":5600},{"id":5629,"name":"captureRejections","kind":1024,"kindString":"Property","flags":{"isStatic":true,"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Sets or gets the default captureRejection value for all emitters."}]},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":296,"character":15}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"EventEmitter.captureRejections"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"captureRejections"},"text":{"comment":"<p>Sets or gets the default captureRejection value for all emitters.</p>\n"},"parentId":5600},{"id":5630,"name":"defaultMaxListeners","kind":1024,"kindString":"Property","flags":{"isStatic":true,"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":297,"character":15}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"EventEmitter.defaultMaxListeners"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"defaultMaxListeners"},"text":{},"parentId":5600},{"id":5627,"name":"errorMonitor","kind":1024,"kindString":"Property","flags":{"isStatic":true,"isExternal":true,"isReadonly":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"This symbol shall be used to install a listener for only monitoring "},{"kind":"code","text":"`'error'`"},{"kind":"text","text":"\nevents. Listeners installed using this symbol are called before the regular\n"},{"kind":"code","text":"`'error'`"},{"kind":"text","text":" listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an\n"},{"kind":"code","text":"`'error'`"},{"kind":"text","text":" event is emitted, therefore the process will still crash if no\nregular "},{"kind":"code","text":"`'error'`"},{"kind":"text","text":" listener is installed."}]},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":290,"character":24}],"type":{"type":"query","queryType":{"type":"reference","id":5627,"name":"errorMonitor","qualifiedName":"EventEmitter.errorMonitor","package":"@types/node"}},"inheritedFrom":{"type":"reference","name":"EventEmitter.errorMonitor"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"errorMonitor"},"text":{"comment":"<p>This symbol shall be used to install a listener for only monitoring <code>&#39;error&#39;</code>\nevents. Listeners installed using this symbol are called before the regular\n<code>&#39;error&#39;</code> listeners are called.</p>\n<p>Installing a listener using this symbol does not change the behavior once an\n<code>&#39;error&#39;</code> event is emitted, therefore the process will still crash if no\nregular <code>&#39;error&#39;</code> listener is installed.</p>\n"},"parentId":5600},{"id":5640,"name":"addListener","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":317,"character":16}],"signatures":[{"id":5641,"name":"addListener","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Alias for "},{"kind":"code","text":"`emitter.on(eventName, listener)`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v0.1.26"}]}]},"parameters":[{"id":5642,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{}},{"id":5643,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reflection","declaration":{"id":5644,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","line":317,"character":66}],"signatures":[{"id":5645,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":5646,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}},"text":{}}],"type":{"type":"reference","id":5600,"name":"DebugEmitter"},"inheritedFrom":{"type":"reference","name":"EventEmitter.addListener"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.addListener","hash":"addListener.addListener"},"text":{"comment":"<p>Alias for <code>emitter.on(eventName, listener)</code>.</p>\n<h5>Since:</h5><p>v0.1.26</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":317,"character":16}],"parentId":5640}],"inheritedFrom":{"type":"reference","name":"EventEmitter.addListener"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"addListener"},"text":{},"parentId":5600},{"id":5636,"name":"emit","kind":2048,"kindString":"Method","flags":{"isOverride":true},"sources":[{"fileName":"src/sync/events.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/src/sync/events.ts","line":33,"character":2,"url":"https://github.com/FAIMS/FAIMS3/blob/1c1db95f/src/sync/events.ts#L33"}],"signatures":[{"id":5637,"name":"emit","kind":4096,"kindString":"Call signature","flags":{"isOverride":true},"parameters":[{"id":5638,"name":"event","kind":32768,"kindString":"Parameter","flags":{},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{}},{"id":5639,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"unknown"}},"text":{}}],"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"EventEmitter.emit"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.emit","hash":"emit.emit"},"text":{},"sources":[{"fileName":"src/sync/events.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/src/sync/events.ts","line":33,"character":2,"url":"https://github.com/FAIMS/FAIMS3/blob/1c1db95f/src/sync/events.ts#L33"}],"parentId":5636}],"overwrites":{"type":"reference","name":"EventEmitter.emit"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"emit"},"text":{},"parentId":5600},{"id":5706,"name":"eventNames","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":632,"character":16}],"signatures":[{"id":5707,"name":"eventNames","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "},{"kind":"code","text":"`Symbol`"},{"kind":"text","text":"s.\n\n"},{"kind":"code","text":"```js\nconst EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v6.0.0"}]}]},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]}},"inheritedFrom":{"type":"reference","name":"EventEmitter.eventNames"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.eventNames","hash":"eventNames.eventNames"},"text":{"comment":"<p>Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or <code>Symbol</code>s.</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">EventEmitter</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>events<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">myEE</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n<span class=\"pl-smi\">myEE</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, () <span class=\"pl-k\">=></span> {});\n<span class=\"pl-smi\">myEE</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>bar<span class=\"pl-pds\">'</span></span>, () <span class=\"pl-k\">=></span> {});\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">sym</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">Symbol</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>symbol<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-smi\">myEE</span>.<span class=\"pl-en\">on</span>(sym, () <span class=\"pl-k\">=></span> {});\n\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">myEE</span>.<span class=\"pl-en\">eventNames</span>());\n<span class=\"pl-c\">// Prints: [ 'foo', 'bar', Symbol(symbol) ]</span>\n</code></pre>\n<h5>Since:</h5><p>v6.0.0</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":632,"character":16}],"parentId":5706}],"inheritedFrom":{"type":"reference","name":"EventEmitter.eventNames"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"eventNames"},"text":{},"parentId":5600},{"id":5681,"name":"getMaxListeners","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":489,"character":16}],"signatures":[{"id":5682,"name":"getMaxListeners","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Returns the current max listener value for the "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":" which is either\nset by "},{"kind":"code","text":"`emitter.setMaxListeners(n)`"},{"kind":"text","text":" or defaults to "},{"kind":"inline-tag","tag":"@link","text":"defaultMaxListeners","target":5630},{"kind":"text","text":"."}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v1.0.0"}]}]},"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"EventEmitter.getMaxListeners"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.getMaxListeners","hash":"getMaxListeners.getMaxListeners"},"text":{"comment":"<p>Returns the current max listener value for the <code>EventEmitter</code> which is either\nset by <code>emitter.setMaxListeners(n)</code> or defaults to <a href=\"5630\">defaultMaxListeners</a>.</p>\n<h5>Since:</h5><p>v1.0.0</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":489,"character":16}],"parentId":5681}],"inheritedFrom":{"type":"reference","name":"EventEmitter.getMaxListeners"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"getMaxListeners"},"text":{},"parentId":5600},{"id":5689,"name":"listenerCount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":579,"character":16}],"signatures":[{"id":5690,"name":"listenerCount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Returns the number of listeners listening to the event named "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v3.2.0"}]}]},"parameters":[{"id":5691,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The name of the event being listened for"}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{"comment":"<p>The name of the event being listened for</p>\n"}}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"EventEmitter.listenerCount"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.listenerCount","hash":"listenerCount.listenerCount"},"text":{"comment":"<p>Returns the number of listeners listening to the event named <code>eventName</code>.</p>\n<h5>Since:</h5><p>v3.2.0</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":579,"character":16}],"parentId":5689}],"inheritedFrom":{"type":"reference","name":"EventEmitter.listenerCount"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"listenerCount"},"text":{},"parentId":5600},{"id":5683,"name":"listeners","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":502,"character":16}],"signatures":[{"id":5684,"name":"listeners","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Returns a copy of the array of listeners for the event named "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":".\n\n"},{"kind":"code","text":"```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v0.1.26"}]}]},"parameters":[{"id":5685,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{}}],"type":{"type":"array","elementType":{"type":"reference","name":"Function","qualifiedName":"Function","package":"typescript"}},"inheritedFrom":{"type":"reference","name":"EventEmitter.listeners"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.listeners","hash":"listeners.listeners"},"text":{"comment":"<p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p>\n<pre><code class=\"language-js\"><span class=\"pl-smi\">server</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>connection<span class=\"pl-pds\">'</span></span>, (<span class=\"pl-smi\">stream</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>someone connected!<span class=\"pl-pds\">'</span></span>);\n});\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">util</span>.<span class=\"pl-en\">inspect</span>(<span class=\"pl-smi\">server</span>.<span class=\"pl-en\">listeners</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>connection<span class=\"pl-pds\">'</span></span>)));\n<span class=\"pl-c\">// Prints: [ [Function] ]</span>\n</code></pre>\n<h5>Since:</h5><p>v0.1.26</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":502,"character":16}],"parentId":5683}],"inheritedFrom":{"type":"reference","name":"EventEmitter.listeners"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"listeners"},"text":{},"parentId":5600},{"id":5668,"name":"off","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":462,"character":16}],"signatures":[{"id":5669,"name":"off","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Alias for "},{"kind":"code","text":"`emitter.removeListener()`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v10.0.0"}]}]},"parameters":[{"id":5670,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{}},{"id":5671,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reflection","declaration":{"id":5672,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","line":462,"character":58}],"signatures":[{"id":5673,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":5674,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}},"text":{}}],"type":{"type":"reference","id":5600,"name":"DebugEmitter"},"inheritedFrom":{"type":"reference","name":"EventEmitter.off"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.off","hash":"off.off"},"text":{"comment":"<p>Alias for <code>emitter.removeListener()</code>.</p>\n<h5>Since:</h5><p>v10.0.0</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":462,"character":16}],"parentId":5668}],"inheritedFrom":{"type":"reference","name":"EventEmitter.off"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"off"},"text":{},"parentId":5600},{"id":5647,"name":"on","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":348,"character":16}],"signatures":[{"id":5648,"name":"on","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Adds the "},{"kind":"code","text":"`listener`"},{"kind":"text","text":" function to the end of the listeners array for the\nevent named "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":". No checks are made to see if the "},{"kind":"code","text":"`listener`"},{"kind":"text","text":" has\nalready been added. Multiple calls passing the same combination of "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":"and "},{"kind":"code","text":"`listener`"},{"kind":"text","text":" will result in the "},{"kind":"code","text":"`listener`"},{"kind":"text","text":" being added, and called, multiple\ntimes.\n\n"},{"kind":"code","text":"```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"},{"kind":"text","text":"\n\nReturns a reference to the "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"},{"kind":"code","text":"`emitter.prependListener()`"},{"kind":"text","text":" method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"},{"kind":"code","text":"```js\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => console.log('a'));\nmyEE.prependListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v0.1.101"}]}]},"parameters":[{"id":5649,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The name of the event."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{"comment":"<p>The name of the event.</p>\n"}},{"id":5650,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The callback function"}]},"type":{"type":"reflection","declaration":{"id":5651,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","line":348,"character":57}],"signatures":[{"id":5652,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":5653,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}},"text":{"comment":"<p>The callback function</p>\n"}}],"type":{"type":"reference","id":5600,"name":"DebugEmitter"},"inheritedFrom":{"type":"reference","name":"EventEmitter.on"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.on","hash":"on.on"},"text":{"comment":"<p>Adds the <code>listener</code> function to the end of the listeners array for the\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\nalready been added. Multiple calls passing the same combination of <code>eventName</code>and <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\ntimes.</p>\n<pre><code class=\"language-js\"><span class=\"pl-smi\">server</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>connection<span class=\"pl-pds\">'</span></span>, (<span class=\"pl-smi\">stream</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>someone connected!<span class=\"pl-pds\">'</span></span>);\n});\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n<p>By default, event listeners are invoked in the order they are added. The<code>emitter.prependListener()</code> method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">myEE</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n<span class=\"pl-smi\">myEE</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, () <span class=\"pl-k\">=></span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>));\n<span class=\"pl-smi\">myEE</span>.<span class=\"pl-en\">prependListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, () <span class=\"pl-k\">=></span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>));\n<span class=\"pl-smi\">myEE</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-c\">// Prints:</span>\n<span class=\"pl-c\">//   b</span>\n<span class=\"pl-c\">//   a</span>\n</code></pre>\n<h5>Since:</h5><p>v0.1.101</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":348,"character":16}],"parentId":5647}],"inheritedFrom":{"type":"reference","name":"EventEmitter.on"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"on"},"text":{},"parentId":5600},{"id":5654,"name":"once","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":377,"character":16}],"signatures":[{"id":5655,"name":"once","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Adds a **one-time**"},{"kind":"code","text":"`listener`"},{"kind":"text","text":" function for the event named "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":". The\nnext time "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":" is triggered, this listener is removed and then invoked.\n\n"},{"kind":"code","text":"```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"},{"kind":"text","text":"\n\nReturns a reference to the "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"},{"kind":"code","text":"`emitter.prependOnceListener()`"},{"kind":"text","text":" method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"},{"kind":"code","text":"```js\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v0.3.0"}]}]},"parameters":[{"id":5656,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The name of the event."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{"comment":"<p>The name of the event.</p>\n"}},{"id":5657,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The callback function"}]},"type":{"type":"reflection","declaration":{"id":5658,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","line":377,"character":59}],"signatures":[{"id":5659,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":5660,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}},"text":{"comment":"<p>The callback function</p>\n"}}],"type":{"type":"reference","id":5600,"name":"DebugEmitter"},"inheritedFrom":{"type":"reference","name":"EventEmitter.once"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.once","hash":"once.once"},"text":{"comment":"<p>Adds a <strong>one-time</strong><code>listener</code> function for the event named <code>eventName</code>. The\nnext time <code>eventName</code> is triggered, this listener is removed and then invoked.</p>\n<pre><code class=\"language-js\"><span class=\"pl-smi\">server</span>.<span class=\"pl-en\">once</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>connection<span class=\"pl-pds\">'</span></span>, (<span class=\"pl-smi\">stream</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Ah, we have our first user!<span class=\"pl-pds\">'</span></span>);\n});\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n<p>By default, event listeners are invoked in the order they are added. The<code>emitter.prependOnceListener()</code> method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">myEE</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n<span class=\"pl-smi\">myEE</span>.<span class=\"pl-en\">once</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, () <span class=\"pl-k\">=></span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>a<span class=\"pl-pds\">'</span></span>));\n<span class=\"pl-smi\">myEE</span>.<span class=\"pl-en\">prependOnceListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, () <span class=\"pl-k\">=></span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>b<span class=\"pl-pds\">'</span></span>));\n<span class=\"pl-smi\">myEE</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-c\">// Prints:</span>\n<span class=\"pl-c\">//   b</span>\n<span class=\"pl-c\">//   a</span>\n</code></pre>\n<h5>Since:</h5><p>v0.3.0</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":377,"character":16}],"parentId":5654}],"inheritedFrom":{"type":"reference","name":"EventEmitter.once"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"once"},"text":{},"parentId":5600},{"id":5692,"name":"prependListener","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":597,"character":16}],"signatures":[{"id":5693,"name":"prependListener","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Adds the "},{"kind":"code","text":"`listener`"},{"kind":"text","text":" function to the _beginning_ of the listeners array for the\nevent named "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":". No checks are made to see if the "},{"kind":"code","text":"`listener`"},{"kind":"text","text":" has\nalready been added. Multiple calls passing the same combination of "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":"and "},{"kind":"code","text":"`listener`"},{"kind":"text","text":" will result in the "},{"kind":"code","text":"`listener`"},{"kind":"text","text":" being added, and called, multiple\ntimes.\n\n"},{"kind":"code","text":"```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"},{"kind":"text","text":"\n\nReturns a reference to the "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":", so that calls can be chained."}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v6.0.0"}]}]},"parameters":[{"id":5694,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The name of the event."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{"comment":"<p>The name of the event.</p>\n"}},{"id":5695,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The callback function"}]},"type":{"type":"reflection","declaration":{"id":5696,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","line":597,"character":70}],"signatures":[{"id":5697,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":5698,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}},"text":{"comment":"<p>The callback function</p>\n"}}],"type":{"type":"reference","id":5600,"name":"DebugEmitter"},"inheritedFrom":{"type":"reference","name":"EventEmitter.prependListener"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.prependListener","hash":"prependListener.prependListener"},"text":{"comment":"<p>Adds the <code>listener</code> function to the <em>beginning</em> of the listeners array for the\nevent named <code>eventName</code>. No checks are made to see if the <code>listener</code> has\nalready been added. Multiple calls passing the same combination of <code>eventName</code>and <code>listener</code> will result in the <code>listener</code> being added, and called, multiple\ntimes.</p>\n<pre><code class=\"language-js\"><span class=\"pl-smi\">server</span>.<span class=\"pl-en\">prependListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>connection<span class=\"pl-pds\">'</span></span>, (<span class=\"pl-smi\">stream</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>someone connected!<span class=\"pl-pds\">'</span></span>);\n});\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n<h5>Since:</h5><p>v6.0.0</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":597,"character":16}],"parentId":5692}],"inheritedFrom":{"type":"reference","name":"EventEmitter.prependListener"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"prependListener"},"text":{},"parentId":5600},{"id":5699,"name":"prependOnceListener","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":613,"character":16}],"signatures":[{"id":5700,"name":"prependOnceListener","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Adds a **one-time**"},{"kind":"code","text":"`listener`"},{"kind":"text","text":" function for the event named "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":" to the _beginning_ of the listeners array. The next time "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":" is triggered, this\nlistener is removed, and then invoked.\n\n"},{"kind":"code","text":"```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"},{"kind":"text","text":"\n\nReturns a reference to the "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":", so that calls can be chained."}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v6.0.0"}]}]},"parameters":[{"id":5701,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The name of the event."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{"comment":"<p>The name of the event.</p>\n"}},{"id":5702,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The callback function"}]},"type":{"type":"reflection","declaration":{"id":5703,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","line":613,"character":74}],"signatures":[{"id":5704,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":5705,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}},"text":{"comment":"<p>The callback function</p>\n"}}],"type":{"type":"reference","id":5600,"name":"DebugEmitter"},"inheritedFrom":{"type":"reference","name":"EventEmitter.prependOnceListener"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.prependOnceListener","hash":"prependOnceListener.prependOnceListener"},"text":{"comment":"<p>Adds a <strong>one-time</strong><code>listener</code> function for the event named <code>eventName</code> to the <em>beginning</em> of the listeners array. The next time <code>eventName</code> is triggered, this\nlistener is removed, and then invoked.</p>\n<pre><code class=\"language-js\"><span class=\"pl-smi\">server</span>.<span class=\"pl-en\">prependOnceListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>connection<span class=\"pl-pds\">'</span></span>, (<span class=\"pl-smi\">stream</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Ah, we have our first user!<span class=\"pl-pds\">'</span></span>);\n});\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n<h5>Since:</h5><p>v6.0.0</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":613,"character":16}],"parentId":5699}],"inheritedFrom":{"type":"reference","name":"EventEmitter.prependOnceListener"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"prependOnceListener"},"text":{},"parentId":5600},{"id":5686,"name":"rawListeners","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":532,"character":16}],"signatures":[{"id":5687,"name":"rawListeners","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Returns a copy of the array of listeners for the event named "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":",\nincluding any wrappers (such as those created by "},{"kind":"code","text":"`.once()`"},{"kind":"text","text":").\n\n"},{"kind":"code","text":"```js\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v9.4.0"}]}]},"parameters":[{"id":5688,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{}}],"type":{"type":"array","elementType":{"type":"reference","name":"Function","qualifiedName":"Function","package":"typescript"}},"inheritedFrom":{"type":"reference","name":"EventEmitter.rawListeners"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.rawListeners","hash":"rawListeners.rawListeners"},"text":{"comment":"<p>Returns a copy of the array of listeners for the event named <code>eventName</code>,\nincluding any wrappers (such as those created by <code>.once()</code>).</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">emitter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n<span class=\"pl-smi\">emitter</span>.<span class=\"pl-en\">once</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>log<span class=\"pl-pds\">'</span></span>, () <span class=\"pl-k\">=></span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>log once<span class=\"pl-pds\">'</span></span>));\n\n<span class=\"pl-c\">// Returns a new Array with a function `onceWrapper` which has a property</span>\n<span class=\"pl-c\">// `listener` which contains the original listener bound above</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">listeners</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">emitter</span>.<span class=\"pl-en\">rawListeners</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>log<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">logFnWrapper</span> <span class=\"pl-k\">=</span> listeners[<span class=\"pl-c1\">0</span>];\n\n<span class=\"pl-c\">// Logs \"log once\" to the console and does not unbind the `once` event</span>\n<span class=\"pl-smi\">logFnWrapper</span>.<span class=\"pl-en\">listener</span>();\n\n<span class=\"pl-c\">// Logs \"log once\" to the console and removes the listener</span>\n<span class=\"pl-en\">logFnWrapper</span>();\n\n<span class=\"pl-smi\">emitter</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>log<span class=\"pl-pds\">'</span></span>, () <span class=\"pl-k\">=></span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>log persistently<span class=\"pl-pds\">'</span></span>));\n<span class=\"pl-c\">// Will return a new Array with a single function bound by `.on()` above</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">newListeners</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi\">emitter</span>.<span class=\"pl-en\">rawListeners</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>log<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-c\">// Logs \"log persistently\" twice</span>\nnewListeners[<span class=\"pl-c1\">0</span>]();\n<span class=\"pl-smi\">emitter</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>log<span class=\"pl-pds\">'</span></span>);\n</code></pre>\n<h5>Since:</h5><p>v9.4.0</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":532,"character":16}],"parentId":5686}],"inheritedFrom":{"type":"reference","name":"EventEmitter.rawListeners"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"rawListeners"},"text":{},"parentId":5600},{"id":5675,"name":"removeAllListeners","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":473,"character":16}],"signatures":[{"id":5676,"name":"removeAllListeners","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Removes all listeners, or those of the specified "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":".\n\nIt is bad practice to remove listeners added elsewhere in the code,\nparticularly when the "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":" instance was created by some other\ncomponent or module (e.g. sockets or file streams).\n\nReturns a reference to the "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":", so that calls can be chained."}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v0.1.26"}]}]},"parameters":[{"id":5677,"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{}}],"type":{"type":"reference","id":5600,"name":"DebugEmitter"},"inheritedFrom":{"type":"reference","name":"EventEmitter.removeAllListeners"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.removeAllListeners","hash":"removeAllListeners.removeAllListeners"},"text":{"comment":"<p>Removes all listeners, or those of the specified <code>eventName</code>.</p>\n<p>It is bad practice to remove listeners added elsewhere in the code,\nparticularly when the <code>EventEmitter</code> instance was created by some other\ncomponent or module (e.g. sockets or file streams).</p>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n<h5>Since:</h5><p>v0.1.26</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":473,"character":16}],"parentId":5675}],"inheritedFrom":{"type":"reference","name":"EventEmitter.removeAllListeners"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"removeAllListeners"},"text":{},"parentId":5600},{"id":5661,"name":"removeListener","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":457,"character":16}],"signatures":[{"id":5662,"name":"removeListener","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Removes the specified "},{"kind":"code","text":"`listener`"},{"kind":"text","text":" from the listener array for the event named"},{"kind":"code","text":"`eventName`"},{"kind":"text","text":".\n\n"},{"kind":"code","text":"```js\nconst callback = (stream) => {\n  console.log('someone connected!');\n};\nserver.on('connection', callback);\n// ...\nserver.removeListener('connection', callback);\n```"},{"kind":"text","text":"\n\n"},{"kind":"code","text":"`removeListener()`"},{"kind":"text","text":" will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":", then "},{"kind":"code","text":"`removeListener()`"},{"kind":"text","text":" must be\ncalled multiple times to remove each instance.\n\nOnce an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any"},{"kind":"code","text":"`removeListener()`"},{"kind":"text","text":" or "},{"kind":"code","text":"`removeAllListeners()`"},{"kind":"text","text":" calls _after_ emitting and _before_ the last listener finishes execution\nwill not remove them from"},{"kind":"code","text":"`emit()`"},{"kind":"text","text":" in progress. Subsequent events behave as expected.\n\n"},{"kind":"code","text":"```js\nconst myEmitter = new MyEmitter();\n\nconst callbackA = () => {\n  console.log('A');\n  myEmitter.removeListener('event', callbackB);\n};\n\nconst callbackB = () => {\n  console.log('B');\n};\n\nmyEmitter.on('event', callbackA);\n\nmyEmitter.on('event', callbackB);\n\n// callbackA removes listener callbackB but it will still be called.\n// Internal listener array at time of emit [callbackA, callbackB]\nmyEmitter.emit('event');\n// Prints:\n//   A\n//   B\n\n// callbackB is now removed.\n// Internal listener array [callbackA]\nmyEmitter.emit('event');\n// Prints:\n//   A\n```"},{"kind":"text","text":"\n\nBecause listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered _after_ the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe "},{"kind":"code","text":"`emitter.listeners()`"},{"kind":"text","text":" method will need to be recreated.\n\nWhen a single function has been added as a handler multiple times for a single\nevent (as in the example below), "},{"kind":"code","text":"`removeListener()`"},{"kind":"text","text":" will remove the most\nrecently added instance. In the example the "},{"kind":"code","text":"`once('ping')`"},{"kind":"text","text":"listener is removed:\n\n"},{"kind":"code","text":"```js\nconst ee = new EventEmitter();\n\nfunction pong() {\n  console.log('pong');\n}\n\nee.on('ping', pong);\nee.once('ping', pong);\nee.removeListener('ping', pong);\n\nee.emit('ping');\nee.emit('ping');\n```"},{"kind":"text","text":"\n\nReturns a reference to the "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":", so that calls can be chained."}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v0.1.26"}]}]},"parameters":[{"id":5663,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{}},{"id":5664,"name":"listener","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reflection","declaration":{"id":5665,"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","line":457,"character":69}],"signatures":[{"id":5666,"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"id":5667,"name":"args","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"any"}}}],"type":{"type":"intrinsic","name":"void"}}]}},"text":{}}],"type":{"type":"reference","id":5600,"name":"DebugEmitter"},"inheritedFrom":{"type":"reference","name":"EventEmitter.removeListener"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.removeListener","hash":"removeListener.removeListener"},"text":{"comment":"<p>Removes the specified <code>listener</code> from the listener array for the event named<code>eventName</code>.</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">callback</span> <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">stream</span>) <span class=\"pl-k\">=></span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>someone connected!<span class=\"pl-pds\">'</span></span>);\n};\n<span class=\"pl-smi\">server</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>connection<span class=\"pl-pds\">'</span></span>, callback);\n<span class=\"pl-c\">// ...</span>\n<span class=\"pl-smi\">server</span>.<span class=\"pl-en\">removeListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>connection<span class=\"pl-pds\">'</span></span>, callback);\n</code></pre>\n<p><code>removeListener()</code> will remove, at most, one instance of a listener from the\nlistener array. If any single listener has been added multiple times to the\nlistener array for the specified <code>eventName</code>, then <code>removeListener()</code> must be\ncalled multiple times to remove each instance.</p>\n<p>Once an event is emitted, all listeners attached to it at the\ntime of emitting are called in order. This implies that any<code>removeListener()</code> or <code>removeAllListeners()</code> calls <em>after</em> emitting and <em>before</em> the last listener finishes execution\nwill not remove them from<code>emit()</code> in progress. Subsequent events behave as expected.</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">myEmitter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">MyEmitter</span>();\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">callbackA</span> <span class=\"pl-k\">=</span> () <span class=\"pl-k\">=></span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>A<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-smi\">myEmitter</span>.<span class=\"pl-en\">removeListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>event<span class=\"pl-pds\">'</span></span>, callbackB);\n};\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">callbackB</span> <span class=\"pl-k\">=</span> () <span class=\"pl-k\">=></span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>B<span class=\"pl-pds\">'</span></span>);\n};\n\n<span class=\"pl-smi\">myEmitter</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>event<span class=\"pl-pds\">'</span></span>, callbackA);\n\n<span class=\"pl-smi\">myEmitter</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>event<span class=\"pl-pds\">'</span></span>, callbackB);\n\n<span class=\"pl-c\">// callbackA removes listener callbackB but it will still be called.</span>\n<span class=\"pl-c\">// Internal listener array at time of emit [callbackA, callbackB]</span>\n<span class=\"pl-smi\">myEmitter</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>event<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-c\">// Prints:</span>\n<span class=\"pl-c\">//   A</span>\n<span class=\"pl-c\">//   B</span>\n\n<span class=\"pl-c\">// callbackB is now removed.</span>\n<span class=\"pl-c\">// Internal listener array [callbackA]</span>\n<span class=\"pl-smi\">myEmitter</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>event<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-c\">// Prints:</span>\n<span class=\"pl-c\">//   A</span>\n</code></pre>\n<p>Because listeners are managed using an internal array, calling this will\nchange the position indices of any listener registered <em>after</em> the listener\nbeing removed. This will not impact the order in which listeners are called,\nbut it means that any copies of the listener array as returned by\nthe <code>emitter.listeners()</code> method will need to be recreated.</p>\n<p>When a single function has been added as a handler multiple times for a single\nevent (as in the example below), <code>removeListener()</code> will remove the most\nrecently added instance. In the example the <code>once(&#39;ping&#39;)</code>listener is removed:</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> <span class=\"pl-c1\">ee</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">pong</span>() {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>pong<span class=\"pl-pds\">'</span></span>);\n}\n\n<span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ping<span class=\"pl-pds\">'</span></span>, pong);\n<span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">once</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ping<span class=\"pl-pds\">'</span></span>, pong);\n<span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">removeListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ping<span class=\"pl-pds\">'</span></span>, pong);\n\n<span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ping<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ping<span class=\"pl-pds\">'</span></span>);\n</code></pre>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n<h5>Since:</h5><p>v0.1.26</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":457,"character":16}],"parentId":5661}],"inheritedFrom":{"type":"reference","name":"EventEmitter.removeListener"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"removeListener"},"text":{},"parentId":5600},{"id":5678,"name":"setMaxListeners","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":483,"character":16}],"signatures":[{"id":5679,"name":"setMaxListeners","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"By default "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":"s will print a warning if more than "},{"kind":"code","text":"`10`"},{"kind":"text","text":" listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "},{"kind":"code","text":"`emitter.setMaxListeners()`"},{"kind":"text","text":" method allows the limit to be\nmodified for this specific "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":" instance. The value can be set to"},{"kind":"code","text":"`Infinity`"},{"kind":"text","text":" (or "},{"kind":"code","text":"`0`"},{"kind":"text","text":") to indicate an unlimited number of listeners.\n\nReturns a reference to the "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":", so that calls can be chained."}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v0.3.5"}]}]},"parameters":[{"id":5680,"name":"n","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"number"},"text":{}}],"type":{"type":"reference","id":5600,"name":"DebugEmitter"},"inheritedFrom":{"type":"reference","name":"EventEmitter.setMaxListeners"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.setMaxListeners","hash":"setMaxListeners.setMaxListeners"},"text":{"comment":"<p>By default <code>EventEmitter</code>s will print a warning if more than <code>10</code> listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The <code>emitter.setMaxListeners()</code> method allows the limit to be\nmodified for this specific <code>EventEmitter</code> instance. The value can be set to<code>Infinity</code> (or <code>0</code>) to indicate an unlimited number of listeners.</p>\n<p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p>\n<h5>Since:</h5><p>v0.3.5</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":483,"character":16}],"parentId":5678}],"inheritedFrom":{"type":"reference","name":"EventEmitter.setMaxListeners"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"setMaxListeners"},"text":{},"parentId":5600},{"id":5619,"name":"getEventListeners","kind":2048,"kindString":"Method","flags":{"isStatic":true,"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":262,"character":15}],"signatures":[{"id":5620,"name":"getEventListeners","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Returns a copy of the array of listeners for the event named "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":".\n\nFor "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":"s this behaves exactly the same as calling "},{"kind":"code","text":"`.listeners`"},{"kind":"text","text":" on\nthe emitter.\n\nFor "},{"kind":"code","text":"`EventTarget`"},{"kind":"text","text":"s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"},{"kind":"code","text":"```js\nconst { getEventListeners, EventEmitter } = require('events');\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  getEventListeners(ee, 'foo'); // [listener]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  getEventListeners(et, 'foo'); // [listener]\n}\n```"}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v15.2.0, v14.17.0"}]}]},"parameters":[{"id":5621,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"reference","name":"EventEmitter","qualifiedName":"global.NodeJS.EventEmitter","package":"@types/node"},{"type":"reference","name":"DOMEventTarget","qualifiedName":"DOMEventTarget","package":"@types/node"}]},"text":{}},{"id":5622,"name":"name","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{}}],"type":{"type":"array","elementType":{"type":"reference","name":"Function","qualifiedName":"Function","package":"typescript"}},"inheritedFrom":{"type":"reference","name":"EventEmitter.getEventListeners"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.getEventListeners","hash":"getEventListeners.getEventListeners"},"text":{"comment":"<p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p>\n<p>For <code>EventEmitter</code>s this behaves exactly the same as calling <code>.listeners</code> on\nthe emitter.</p>\n<p>For <code>EventTarget</code>s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> { <span class=\"pl-c1\">getEventListeners</span>, <span class=\"pl-c1\">EventEmitter</span> } <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>events<span class=\"pl-pds\">'</span></span>);\n\n{\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">ee</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">listener</span> <span class=\"pl-k\">=</span> () <span class=\"pl-k\">=></span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Events are fun<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, listener);\n  <span class=\"pl-en\">getEventListeners</span>(ee, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// [listener]</span>\n}\n{\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">et</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventTarget</span>();\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">listener</span> <span class=\"pl-k\">=</span> () <span class=\"pl-k\">=></span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Events are fun<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-smi\">et</span>.<span class=\"pl-c1\">addEventListener</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, listener);\n  <span class=\"pl-en\">getEventListeners</span>(et, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// [listener]</span>\n}\n</code></pre>\n<h5>Since:</h5><p>v15.2.0, v14.17.0</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":262,"character":8}],"parentId":5619}],"inheritedFrom":{"type":"reference","name":"EventEmitter.getEventListeners"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"getEventListeners"},"text":{},"parentId":5600},{"id":5615,"name":"listenerCount","kind":2048,"kindString":"Method","flags":{"isStatic":true,"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":234,"character":15}],"signatures":[{"id":5616,"name":"listenerCount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"A class method that returns the number of listeners for the given "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":"registered on the given "},{"kind":"code","text":"`emitter`"},{"kind":"text","text":".\n\n"},{"kind":"code","text":"```js\nconst { EventEmitter, listenerCount } = require('events');\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v0.9.12"}]},{"tag":"@deprecated","content":[{"kind":"text","text":"Since v3.2.0 - Use "},{"kind":"code","text":"`listenerCount`"},{"kind":"text","text":" instead."}]}]},"parameters":[{"id":5617,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The emitter to query"}]},"type":{"type":"reference","name":"EventEmitter","qualifiedName":"global.NodeJS.EventEmitter","package":"@types/node"},"text":{"comment":"<p>The emitter to query</p>\n"}},{"id":5618,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The event name"}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{"comment":"<p>The event name</p>\n"}}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"EventEmitter.listenerCount"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.listenerCount","hash":"listenerCount.listenerCount"},"text":{"comment":"<p>A class method that returns the number of listeners for the given <code>eventName</code>registered on the given <code>emitter</code>.</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> { <span class=\"pl-c1\">EventEmitter</span>, <span class=\"pl-c1\">listenerCount</span> } <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>events<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">myEmitter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n<span class=\"pl-smi\">myEmitter</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>event<span class=\"pl-pds\">'</span></span>, () <span class=\"pl-k\">=></span> {});\n<span class=\"pl-smi\">myEmitter</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>event<span class=\"pl-pds\">'</span></span>, () <span class=\"pl-k\">=></span> {});\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-en\">listenerCount</span>(myEmitter, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>event<span class=\"pl-pds\">'</span></span>));\n<span class=\"pl-c\">// Prints: 2</span>\n</code></pre>\n<h5>Since:</h5><p>v0.9.12</p>\n<h5>Deprecated:</h5><p>Since v3.2.0 - Use <code>listenerCount</code> instead.</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":234,"character":8}],"parentId":5615}],"inheritedFrom":{"type":"reference","name":"EventEmitter.listenerCount"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"listenerCount"},"text":{},"parentId":5600},{"id":5610,"name":"on","kind":2048,"kindString":"Method","flags":{"isStatic":true,"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":217,"character":15}],"signatures":[{"id":5611,"name":"on","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"code","text":"```js\nconst { on, EventEmitter } = require('events');\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo')) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n```"},{"kind":"text","text":"\n\nReturns an "},{"kind":"code","text":"`AsyncIterator`"},{"kind":"text","text":" that iterates "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":" events. It will throw\nif the "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":" emits "},{"kind":"code","text":"`'error'`"},{"kind":"text","text":". It removes all listeners when\nexiting the loop. The "},{"kind":"code","text":"`value`"},{"kind":"text","text":" returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "},{"kind":"code","text":"`AbortSignal`"},{"kind":"text","text":" can be used to cancel waiting on events:\n\n"},{"kind":"code","text":"```js\nconst { on, EventEmitter } = require('events');\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v13.6.0, v12.16.0"}]},{"tag":"@returns","content":[{"kind":"text","text":"that iterates "},{"kind":"code","text":"`eventName`"},{"kind":"text","text":" events emitted by the "},{"kind":"code","text":"`emitter`"}]}]},"parameters":[{"id":5612,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"EventEmitter","qualifiedName":"global.NodeJS.EventEmitter","package":"@types/node"},"text":{}},{"id":5613,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The name of the event being listened for"}]},"type":{"type":"intrinsic","name":"string"},"text":{"comment":"<p>The name of the event being listened for</p>\n"}},{"id":5614,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reference","name":"StaticEventEmitterOptions","qualifiedName":"StaticEventEmitterOptions","package":"@types/node"},"text":{}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"AsyncIterableIterator","qualifiedName":"AsyncIterableIterator","package":"typescript"},"inheritedFrom":{"type":"reference","name":"EventEmitter.on"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.on","hash":"on.on"},"text":{"comment":"<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> { <span class=\"pl-c1\">on</span>, <span class=\"pl-c1\">EventEmitter</span> } <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>events<span class=\"pl-pds\">'</span></span>);\n\n(<span class=\"pl-k\">async</span> () <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">ee</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n\n  <span class=\"pl-c\">// Emit later on</span>\n  <span class=\"pl-c1\">process</span>.<span class=\"pl-en\">nextTick</span>(() <span class=\"pl-k\">=></span> {\n    <span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bar<span class=\"pl-pds\">'</span></span>);\n    <span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">42</span>);\n  });\n\n  <span class=\"pl-k\">for</span> <span class=\"pl-k\">await</span> (<span class=\"pl-k\">const</span> <span class=\"pl-c1\">event</span> <span class=\"pl-k\">of</span> <span class=\"pl-en\">on</span>(ee, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>)) {\n    <span class=\"pl-c\">// The execution of this inner block is synchronous and it</span>\n    <span class=\"pl-c\">// processes one event at a time (even with await). Do not use</span>\n    <span class=\"pl-c\">// if concurrent execution is required.</span>\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">event</span>); <span class=\"pl-c\">// prints ['bar'] [42]</span>\n  }\n  <span class=\"pl-c\">// Unreachable here</span>\n})();\n</code></pre>\n<p>Returns an <code>AsyncIterator</code> that iterates <code>eventName</code> events. It will throw\nif the <code>EventEmitter</code> emits <code>&#39;error&#39;</code>. It removes all listeners when\nexiting the loop. The <code>value</code> returned by each iteration is an array\ncomposed of the emitted event arguments.</p>\n<p>An <code>AbortSignal</code> can be used to cancel waiting on events:</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> { <span class=\"pl-c1\">on</span>, <span class=\"pl-c1\">EventEmitter</span> } <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>events<span class=\"pl-pds\">'</span></span>);\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">ac</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">AbortController</span>();\n\n(<span class=\"pl-k\">async</span> () <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">ee</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n\n  <span class=\"pl-c\">// Emit later on</span>\n  <span class=\"pl-c1\">process</span>.<span class=\"pl-en\">nextTick</span>(() <span class=\"pl-k\">=></span> {\n    <span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>bar<span class=\"pl-pds\">'</span></span>);\n    <span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">42</span>);\n  });\n\n  <span class=\"pl-k\">for</span> <span class=\"pl-k\">await</span> (<span class=\"pl-k\">const</span> <span class=\"pl-c1\">event</span> <span class=\"pl-k\">of</span> <span class=\"pl-en\">on</span>(ee, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, { signal<span class=\"pl-k\">:</span> <span class=\"pl-smi\">ac</span>.<span class=\"pl-smi\">signal</span> })) {\n    <span class=\"pl-c\">// The execution of this inner block is synchronous and it</span>\n    <span class=\"pl-c\">// processes one event at a time (even with await). Do not use</span>\n    <span class=\"pl-c\">// if concurrent execution is required.</span>\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-c1\">event</span>); <span class=\"pl-c\">// prints ['bar'] [42]</span>\n  }\n  <span class=\"pl-c\">// Unreachable here</span>\n})();\n\n<span class=\"pl-c1\">process</span>.<span class=\"pl-en\">nextTick</span>(() <span class=\"pl-k\">=></span> <span class=\"pl-smi\">ac</span>.<span class=\"pl-c1\">abort</span>());\n</code></pre>\n<h5>Since:</h5><p>v13.6.0, v12.16.0</p>\n<h5>Returns:</h5><p>that iterates <code>eventName</code> events emitted by the <code>emitter</code></p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":217,"character":8}],"parentId":5610}],"inheritedFrom":{"type":"reference","name":"EventEmitter.on"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"on"},"text":{},"parentId":5600},{"id":5601,"name":"once","kind":2048,"kindString":"Method","flags":{"isStatic":true,"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":157,"character":15},{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":158,"character":15}],"signatures":[{"id":5602,"name":"once","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Creates a "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" that is fulfilled when the "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":" emits the given\nevent or that is rejected if the "},{"kind":"code","text":"`EventEmitter`"},{"kind":"text","text":" emits "},{"kind":"code","text":"`'error'`"},{"kind":"text","text":" while waiting.\nThe "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"},{"kind":"code","text":"`'error'`"},{"kind":"text","text":" event\nsemantics and does not listen to the "},{"kind":"code","text":"`'error'`"},{"kind":"text","text":" event.\n\n"},{"kind":"code","text":"```js\nconst { once, EventEmitter } = require('events');\n\nasync function run() {\n  const ee = new EventEmitter();\n\n  process.nextTick(() => {\n    ee.emit('myevent', 42);\n  });\n\n  const [value] = await once(ee, 'myevent');\n  console.log(value);\n\n  const err = new Error('kaboom');\n  process.nextTick(() => {\n    ee.emit('error', err);\n  });\n\n  try {\n    await once(ee, 'myevent');\n  } catch (err) {\n    console.log('error happened', err);\n  }\n}\n\nrun();\n```"},{"kind":"text","text":"\n\nThe special handling of the "},{"kind":"code","text":"`'error'`"},{"kind":"text","text":" event is only used when "},{"kind":"code","text":"`events.once()`"},{"kind":"text","text":"is used to wait for another event. If "},{"kind":"code","text":"`events.once()`"},{"kind":"text","text":" is used to wait for the\n'"},{"kind":"code","text":"`error'`"},{"kind":"text","text":" event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"},{"kind":"code","text":"```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.log('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"},{"kind":"text","text":"\n\nAn "},{"kind":"code","text":"`AbortSignal`"},{"kind":"text","text":" can be used to cancel waiting for the event:\n\n"},{"kind":"code","text":"```js\nconst { EventEmitter, once } = require('events');\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v11.13.0, v10.16.0"}]}]},"parameters":[{"id":5603,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"NodeEventTarget","qualifiedName":"NodeEventTarget","package":"@types/node"},"text":{}},{"id":5604,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"symbol"}]},"text":{}},{"id":5605,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reference","name":"StaticEventEmitterOptions","qualifiedName":"StaticEventEmitterOptions","package":"@types/node"},"text":{}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"inheritedFrom":{"type":"reference","name":"EventEmitter.once"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.once","hash":"once.once"},"text":{"comment":"<p>Creates a <code>Promise</code> that is fulfilled when the <code>EventEmitter</code> emits the given\nevent or that is rejected if the <code>EventEmitter</code> emits <code>&#39;error&#39;</code> while waiting.\nThe <code>Promise</code> will resolve with an array of all the arguments emitted to the\ngiven event.</p>\n<p>This method is intentionally generic and works with the web platform <a href=\"https://dom.spec.whatwg.org/#interface-eventtarget\">EventTarget</a> interface, which has no special<code>&#39;error&#39;</code> event\nsemantics and does not listen to the <code>&#39;error&#39;</code> event.</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> { <span class=\"pl-c1\">once</span>, <span class=\"pl-c1\">EventEmitter</span> } <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>events<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">run</span>() {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">ee</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n\n  <span class=\"pl-c1\">process</span>.<span class=\"pl-en\">nextTick</span>(() <span class=\"pl-k\">=></span> {\n    <span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>myevent<span class=\"pl-pds\">'</span></span>, <span class=\"pl-c1\">42</span>);\n  });\n\n  <span class=\"pl-k\">const</span> [<span class=\"pl-c1\">value</span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">once</span>(ee, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>myevent<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(value);\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">err</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>kaboom<span class=\"pl-pds\">'</span></span>);\n  <span class=\"pl-c1\">process</span>.<span class=\"pl-en\">nextTick</span>(() <span class=\"pl-k\">=></span> {\n    <span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>error<span class=\"pl-pds\">'</span></span>, err);\n  });\n\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-k\">await</span> <span class=\"pl-en\">once</span>(ee, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>myevent<span class=\"pl-pds\">'</span></span>);\n  } <span class=\"pl-k\">catch</span> (err) {\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>error happened<span class=\"pl-pds\">'</span></span>, err);\n  }\n}\n\n<span class=\"pl-en\">run</span>();\n</code></pre>\n<p>The special handling of the <code>&#39;error&#39;</code> event is only used when <code>events.once()</code>is used to wait for another event. If <code>events.once()</code> is used to wait for the\n&#39;<code>error&#39;</code> event itself, then it is treated as any other kind of event without\nspecial handling:</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> { <span class=\"pl-c1\">EventEmitter</span>, <span class=\"pl-c1\">once</span> } <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>events<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">ee</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n\n<span class=\"pl-en\">once</span>(ee, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>error<span class=\"pl-pds\">'</span></span>)\n  .<span class=\"pl-c1\">then</span>(([<span class=\"pl-smi\">err</span>]) <span class=\"pl-k\">=></span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ok<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">err</span>.<span class=\"pl-smi\">message</span>))\n  .<span class=\"pl-c1\">catch</span>((<span class=\"pl-smi\">err</span>) <span class=\"pl-k\">=></span> <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>error<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">err</span>.<span class=\"pl-smi\">message</span>));\n\n<span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>error<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">new</span> <span class=\"pl-en\">Error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>boom<span class=\"pl-pds\">'</span></span>));\n\n<span class=\"pl-c\">// Prints: ok boom</span>\n</code></pre>\n<p>An <code>AbortSignal</code> can be used to cancel waiting for the event:</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> { <span class=\"pl-c1\">EventEmitter</span>, <span class=\"pl-c1\">once</span> } <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>events<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">ee</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">ac</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">AbortController</span>();\n\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">foo</span>(<span class=\"pl-smi\">emitter</span>, <span class=\"pl-c1\">event</span>, <span class=\"pl-smi\">signal</span>) {\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-k\">await</span> <span class=\"pl-en\">once</span>(emitter, <span class=\"pl-c1\">event</span>, { signal });\n    <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>event emitted!<span class=\"pl-pds\">'</span></span>);\n  } <span class=\"pl-k\">catch</span> (error) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">error</span>.<span class=\"pl-c1\">name</span> <span class=\"pl-k\">===</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>AbortError<span class=\"pl-pds\">'</span></span>) {\n      <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Waiting for the event was canceled!<span class=\"pl-pds\">'</span></span>);\n    } <span class=\"pl-k\">else</span> {\n      <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>There was an error<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">error</span>.<span class=\"pl-smi\">message</span>);\n    }\n  }\n}\n\n<span class=\"pl-en\">foo</span>(ee, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>, <span class=\"pl-smi\">ac</span>.<span class=\"pl-smi\">signal</span>);\n<span class=\"pl-smi\">ac</span>.<span class=\"pl-c1\">abort</span>(); <span class=\"pl-c\">// Abort waiting for the event</span>\n<span class=\"pl-smi\">ee</span>.<span class=\"pl-en\">emit</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>foo<span class=\"pl-pds\">'</span></span>); <span class=\"pl-c\">// Prints: Waiting for the event was canceled!</span>\n</code></pre>\n<h5>Since:</h5><p>v11.13.0, v10.16.0</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":157,"character":8}],"parentId":5601},{"id":5606,"name":"once","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"parameters":[{"id":5607,"name":"emitter","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"DOMEventTarget","qualifiedName":"DOMEventTarget","package":"@types/node"},"text":{}},{"id":5608,"name":"eventName","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"string"},"text":{}},{"id":5609,"name":"options","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reference","name":"StaticEventEmitterOptions","qualifiedName":"StaticEventEmitterOptions","package":"@types/node"},"text":{}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"any"}}],"name":"Promise","qualifiedName":"Promise","package":"typescript"},"inheritedFrom":{"type":"reference","name":"EventEmitter.once"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.once","hash":"once.once"},"text":{},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":158,"character":8}],"parentId":5601}],"inheritedFrom":{"type":"reference","name":"EventEmitter.once"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"once"},"text":{},"parentId":5600},{"id":5623,"name":"setMaxListeners","kind":2048,"kindString":"Method","flags":{"isStatic":true,"isExternal":true,"isInherited":true},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":280,"character":15}],"signatures":[{"id":5624,"name":"setMaxListeners","kind":4096,"kindString":"Call signature","flags":{"isExternal":true,"isInherited":true},"comment":{"summary":[{"kind":"code","text":"```js\nconst {\n  setMaxListeners,\n  EventEmitter\n} = require('events');\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"}],"blockTags":[{"tag":"@since","content":[{"kind":"text","text":"v15.4.0"}]}]},"parameters":[{"id":5625,"name":"n","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A non-negative number. The maximum number of listeners per "},{"kind":"code","text":"`EventTarget`"},{"kind":"text","text":" event."}]},"type":{"type":"intrinsic","name":"number"},"text":{"comment":"<p>A non-negative number. The maximum number of listeners per <code>EventTarget</code> event.</p>\n"}},{"id":5626,"name":"eventTargets","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isRest":true},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"reference","name":"EventEmitter","qualifiedName":"global.NodeJS.EventEmitter","package":"@types/node"},{"type":"reference","name":"DOMEventTarget","qualifiedName":"DOMEventTarget","package":"@types/node"}]}},"text":{}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"EventEmitter.setMaxListeners"},"is":{"declaration":false},"location":{"query":"sync/events.DebugEmitter.Method.setMaxListeners","hash":"setMaxListeners.setMaxListeners"},"text":{"comment":"<pre><code class=\"language-js\"><span class=\"pl-k\">const</span> {\n  <span class=\"pl-c1\">setMaxListeners</span>,\n  <span class=\"pl-c1\">EventEmitter</span>\n} <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>events<span class=\"pl-pds\">'</span></span>);\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">target</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventTarget</span>();\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">emitter</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">EventEmitter</span>();\n\n<span class=\"pl-en\">setMaxListeners</span>(<span class=\"pl-c1\">5</span>, target, emitter);\n</code></pre>\n<h5>Since:</h5><p>v15.4.0</p>\n"},"sources":[{"fileName":"node_modules/@types/node/events.d.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/node_modules/@types/node/events.d.ts","line":280,"character":8}],"parentId":5623}],"inheritedFrom":{"type":"reference","name":"EventEmitter.setMaxListeners"},"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":"setMaxListeners"},"text":{},"parentId":5600}],"groups":[{"title":"Constructors","children":[5631]},{"title":"Properties","children":[5628,5629,5630,5627]},{"title":"Methods","children":[5640,5636,5706,5681,5689,5683,5668,5647,5654,5692,5699,5686,5675,5661,5678,5619,5615,5610,5601,5623]}],"sources":[{"fileName":"src/sync/events.ts","fullFileName":"/home/brian/FAIMS/3/FAIMS3/src/sync/events.ts","line":29,"character":13,"url":"https://github.com/FAIMS/FAIMS3/blob/1c1db95f/src/sync/events.ts#L29"}],"extendedTypes":[{"type":"reference","name":"EventEmitter","qualifiedName":"EventEmitter","package":"@types/node"}],"is":{"declaration":true},"location":{"query":"sync/events.Class.DebugEmitter","hash":""},"text":{},"parentId":5599,"hierarchy":[{"name":"EventEmitter","children":[{"name":"DebugEmitter","isTarget":true,"linkId":"5600"}]}]}
