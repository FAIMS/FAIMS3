{
  "openapi": "3.0.0",
  "info": {
    "description": "This is the FAIMS Conductor server API documentation.",
    "version": "1.0.0",
    "title": "FAIMS3 API",
    "termsOfService": "http://faims.edu.au/terms/",
    "contact": {
      "email": "help@faims.edu.au"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "components": {
    "securitySchemes": {
      "Auth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid"
      }
    }
  },
  "paths": {
    "/hello/": {
      "get": {
        "summary": "Say hello",
        "description": "Return a hello message as JSON",
        "security": [{
          "Auth": []
        }],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/info": {
      "get": {
        "summary": "Get information",
        "description": "Provides details of the server such as name and description",
        "produces": ["application/json"],
        "security": {"Auth": []},
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ListingsObject"
                }
              }
            }
          }
        }
      }
    },
    "/notebooks/": {
      "get": {
        "summary": "Get a list of notebooks",
        "description": "Get a list of the notebooks managed by this server",
        "tags": ["Notebooks"],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NotebookMeta"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a new notebook",
        "description": "Create a new notebook by uploading JSON metadata and ui-specification",
        "tags": ["Notebooks"],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "requestBody": {
          "description": "Notebook metadata and ui-specification",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Notebook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Notebook"
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/notebooks/{id}/": {
      "get": {
        "summary": "Get a notebook",
        "description": "Get a notebook by id",
        "tags": ["Notebooks"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Notebook id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Notebook"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "put": {
        "summary": "Update a notebook",
        "description": "Update a notebook by identifier",
        "tags": ["Notebooks"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Notebook identifier",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "requestBody": {
          "description": "Notebook metadata and ui-specification",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Notebook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/Notebook"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/notebooks/{id}/records": {
      "get": {
        "summary": "Get a list of records",
        "description": "Get a list of records for a notebook",
        "tags": ["Notebooks"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Notebook identifier",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecordList"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/notebooks/{id}/records/{viewID}.{format}": {
      "get": {
        "summary": "Generate download token for notebook records",
        "description": "Generates a signed JWT token and redirects to download endpoint for exporting notebook records in specified format",
        "tags": ["Notebooks"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {"type": "string"},
            "description": "Notebook identifier"
          },
          {
            "name": "viewID",
            "in": "path", 
            "required": true,
            "schema": {"type": "string"},
            "description": "Form/view identifier"
          },
          {
            "name": "format",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["csv", "zip"]
            },
            "description": "Export format"
          }
        ],
        "security": [{"Auth": []}],
        "responses": {
          "302": {
            "description": "Redirect to download endpoint with JWT token"
          },
          "401": {"$ref": "#/components/responses/UnauthorizedError"},
          "404": {
            "description": "Notebook or form not found"
          }
        }
      }
    },
    "/notebooks/download/{downloadToken}": {
      "get": {
        "summary": "Download notebook records using JWT token",
        "description": "Downloads notebook records in the format specified by the JWT token. Token expires in 5 minutes.",
        "tags": ["Notebooks"],
        "parameters": [
          {
            "name": "downloadToken",
            "in": "path",
            "required": true,
            "schema": {"type": "string"},
            "description": "JWT download token containing download parameters"
          }
        ],
        "responses": {
          "200": {
            "description": "File download",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "Attachment filename"
              }
            }
          },
          "404": {
            "description": "Invalid token or form not found"
          }
        }
      }
    },
    "/notebooks/{id}/users": {
      "get": {
        "summary": "Get users for a notebook",
        "description": "Get a list of users with access to a notebook",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Notebook id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserList"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Add a user to a notebook",
        "description": "Add a user to a notebook",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Notebook id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "requestBody": {
          "description": "User Information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string"
                  },
                  "addrole": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserList"
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/notebooks/template": {
      "post": {
        "summary": "Create a new notebook from an existing template",
        "description": "Creates a new notebook based on an existing template. Requires permission to create notebooks.",
        "tags": ["Notebooks"],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "requestBody": {
          "description": "Template ID and project name for the new notebook",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/PostCreateNotebookFromTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/PostCreateNotebookFromTemplateResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{id}/admin": {
      "post": {
        "summary": "Set server admin status for a user",
        "description": "Set server cluster-admin status for a user. Requires cluster-admin role.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "requestBody": {
          "description": "User Information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "addrole": {
                    "type": "boolean"
                  },
                  "role": {
                    "type": "string",
                    "enum": ["cluster-admin", "notebook-creator"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/UserList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/templates/": {
      "get": {
        "summary": "Get a list of templates",
        "description": "Gets a list of templates from the templates DB.",
        "tags": ["Templates"],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/GetListTemplatesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a new template",
        "description": "Creates a new template. The payload is validated before processing. Requires appropriate permissions.",
        "tags": ["Templates"],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "requestBody": {
          "description": "Template details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/PostCreateTemplateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/PostCreateTemplateResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/templates/{id}": {
      "get": {
        "summary": "Get a specific template",
        "description": "Gets a specific template by ID from the templates DB.",
        "tags": ["Templates"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/GetTemplateByIdResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "put": {
        "summary": "Update an existing template",
        "description": "Updates an existing template. The payload is validated before processing. Requires appropriate permissions.",
        "tags": ["Templates"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "requestBody": {
          "description": "Template details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/PutUpdateTemplateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/PutUpdateTemplateResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/templates/{id}/delete": {
      "post": {
        "summary": "Delete an existing template",
        "description": "Deletes the latest revision of an existing template. Requires appropriate permissions.",
        "tags": ["Templates"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Template id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": ["application/json"],
        "security": [{
          "Auth": []
        }],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/teams/": {
      "get": {
        "summary": "Get a list of teams",
        "description": "Gets a list of all teams from the teams DB",
        "tags": ["Teams"],
        "security": [{"Auth": []}],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/definitions/GetListTeamsResponse"}
              }
            }
          },
          "401": {"$ref": "#/components/responses/UnauthorizedError"}
        }
      },
      "post": {
        "summary": "Create a new team", 
        "description": "Creates a new team. Requires authentication.",
        "tags": ["Teams"],
        "security": [{"Auth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/definitions/PostCreateTeamInput"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/definitions/PostCreateTeamResponse"}
              }
            }
          },
          "401": {"$ref": "#/components/responses/UnauthorizedError"}
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "summary": "Get a team by ID",
        "tags": ["Teams"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "security": [{"Auth": []}],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/definitions/GetTeamByIdResponse"}
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an existing team",
        "tags": ["Teams"],
        "parameters": [
          {
            "name": "id", 
            "in": "path",
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "security": [{"Auth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/definitions/PutUpdateTeamInput"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/definitions/PutUpdateTeamResponse"}
              }
            }
          }
        }
      }
    },
    "/invites/notebook/{projectId}": {
      "get": {
        "summary": "Get all project invites",
        "tags": ["Invites"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path", 
            "required": true,
            "schema": {"type": "string"}
          }
        ],
        "security": [{"Auth": []}],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/definitions/GetProjectInvitesResponse"}
              }
            }
          },
          "401": {"$ref": "#/components/responses/UnauthorizedError"}
        }
      },
      "post": {
        "summary": "Create a project invite",
        "description": "Creates a new invite for a project/notebook. Requires appropriate permissions.",
        "tags": ["Invites"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {"type": "string"},
            "description": "Project/notebook identifier"
          }
        ],
        "security": [{"Auth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/definitions/PostCreateInviteInput"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/definitions/PostCreateProjectInviteResponse"}
              }
            }
          },
          "401": {"$ref": "#/components/responses/UnauthorizedError"}
        }
      }
    },
    "/invites/team/{teamId}": {
      "get": {
        "summary": "Get all team invites", 
        "tags": ["Invites"],
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "required": true, 
            "schema": {"type": "string"}
          }
        ],
        "security": [{"Auth": []}],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/definitions/GetTeamInvitesResponse"}
              }
            }
          },
          "401": {"$ref": "#/components/responses/UnauthorizedError"}
        }
      },
      "post": {
        "summary": "Create a team invite",
        "description": "Creates a new invite for a team. Requires appropriate permissions.",
        "tags": ["Invites"],
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {"type": "string"},
            "description": "Team identifier"
          }
        ],
        "security": [{"Auth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/definitions/PostCreateInviteInput"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/definitions/PostCreateTeamInviteResponse"}
              }
            }
          },
          "401": {"$ref": "#/components/responses/UnauthorizedError"}
        }
      }
    },
    "/long-lived-tokens/": {
      "get": {
        "summary": "Get long-lived tokens",
        "description": "Get tokens for the authenticated user or all tokens (admin only)",
        "tags": ["Long-Lived Tokens"],
        "security": [{"Auth": []}],
        "responses": {
          "200": {
            "description": "successful operation", 
            "content": {
              "application/json": {
                "schema": {"$ref": "#/definitions/GetLongLivedTokensResponse"}
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new long-lived token",
        "tags": ["Long-Lived Tokens"],
        "security": [{"Auth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/definitions/PostCreateLongLivedTokenRequest"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/definitions/PostCreateLongLivedTokenResponse"}
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh access token",
        "description": "Get a new JWT using a refresh token",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/definitions/PostRefreshTokenInput"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/definitions/PostRefreshTokenResponse"}
              }
            }
          }
        }
      }
    },
    "/auth/exchange": {
      "post": {
        "summary": "Exchange token for access/refresh token pair",
        "tags": ["Authentication"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {"$ref": "#/definitions/PostExchangeTokenInput"}
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {"$ref": "#/definitions/PostExchangeTokenResponse"}
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ListingsObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "conductor_url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        }
      }
    },
    "NotebookMeta": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Notebook": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "name": {
          "type": "string"
        },
        "ui-specification": {
          "type": "object"
        }
      }
    },
    "RecordList": {
      "type": "object",
      "properties": {
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Record"
          }
        }
      }
    },
    "Record": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string"
        },
        "record_id": {
          "type": "string"
        },
        "revision_id": {
          "type": "object"
        },
        "type": {
          "type": "string"
        },
        "data": {
          "type": "object"
        },
        "annotations": {
          "type": "object"
        },
        "field_types": {
          "type": "object"
        },
        "relationship": {
          "type": "object"
        },
        "deleted": {
          "type": "boolean"
        },
        "updated_by": {
          "type": "string"
        },
        "created_by": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "UserList": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "GetListTemplatesResponse": {
      "type": "object",
      "properties": {
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TemplateDocument"
          }
        }
      }
    },
    "GetTemplateByIdResponse": {
      "$ref": "#/definitions/TemplateDocument"
    },
    "PostCreateTemplateInput": {
      "type": "object",
      "properties": {
        "template_name": {"type": "string", "minLength": 1},
        "metadata": {"type": "object"},
        "ui_specification": {"type": "object"},
        "teamId": {"type": "string", "description": "Optional team ID"}
      },
      "required": ["template_name", "metadata", "ui_specification"]
    },
    "PostCreateTemplateResponse": {
      "$ref": "#/definitions/TemplateDocument"
    },
    "PutUpdateTemplateInput": {
      "type": "object", 
      "properties": {
        "metadata": {"type": "object"},
        "ui-specification": {"type": "object"}
      },
      "required": ["metadata", "ui-specification"]
    },
    "PutUpdateTemplateResponse": {
      "$ref": "#/definitions/TemplateDocument"
    },
    "TemplateDocument": {
      "allOf": [
        {
          "$ref": "#/definitions/TemplateDetails"
        },
        {
          "$ref": "#/definitions/CouchDocumentFields"
        }
      ]
    },
    "TemplateDetails": {
      "allOf": [
        {
          "$ref": "#/definitions/TemplateEditableDetails"
        },
        {
          "$ref": "#/definitions/TemplateDerivedDetails"
        }
      ]
    },
    "TemplateEditableDetails": {
      "type": "object",
      "properties": {
        "template_name": {
          "type": "string",
          "minLength": 5
        },
        "ui_specification": {
          "$ref": "#/definitions/UiSpecification"
        },
        "metadata": {
          "$ref": "#/definitions/NotebookMetadata"
        }
      },
      "required": ["template_name", "ui_specification", "metadata"]
    },
    "TemplateDerivedDetails": {
      "type": "object",
      "properties": {
        "version": {
          "type": "number",
          "default": 1
        }
      }
    },
    "CouchDocumentFields": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "minLength": 1
        },
        "_rev": {
          "type": "string"
        },
        "_deleted": {
          "type": "boolean"
        }
      },
      "required": ["_id"]
    },
    "UiSpecification": {
      "type": "object",
      "additionalProperties": true
    },
    "NotebookMetadata": {
      "type": "object",
      "additionalProperties": true
    },
    "PostCreateNotebookFromTemplate": {
      "type": "object",
      "properties": {
        "template_id": {
          "type": "string"
        },
        "project_name": {
          "type": "string"
        }
      },
      "required": ["template_id", "project_name"]
    },
    "PostCreateNotebookFromTemplateResponse": {
      "type": "object",
      "properties": {
        "notebook": {
          "type": "string"
        }
      }
    },
    "GetListTeamsResponse": {
      "type": "object",
      "properties": {
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TeamDocument"
          }
        }
      }
    },
    "GetTeamByIdResponse": {
      "$ref": "#/definitions/TeamDocument"
    },
    "PostCreateTeamInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "description": "Name of the team"
        },
        "description": {
          "type": "string",
          "description": "Description of the team"
        }
      },
      "required": ["name"]
    },
    "PostCreateTeamResponse": {
      "$ref": "#/definitions/TeamDocument"
    },
    "PutUpdateTeamInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "description": "Name of the team"
        },
        "description": {
          "type": "string",
          "description": "Description of the team"
        }
      }
    },
    "PutUpdateTeamResponse": {
      "$ref": "#/definitions/TeamDocument"
    },
    "TeamDocument": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier for the team"
        },
        "_rev": {
          "type": "string",
          "description": "CouchDB revision identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the team"
        },
        "description": {
          "type": "string",
          "description": "Description of the team"
        },
        "createdBy": {
          "type": "string",
          "description": "User ID who created the team"
        },
        "createdAt": {
          "type": "number",
          "description": "Unix timestamp when team was created"
        },
        "updatedAt": {
          "type": "number",
          "description": "Unix timestamp when team was last updated"
        }
      },
      "required": ["_id", "name", "createdBy", "createdAt", "updatedAt"]
    },
    "GetProjectInvitesResponse": {
      "type": "object",
      "properties": {
        "invites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectInviteDocument"
          }
        }
      }
    },
    "GetTeamInvitesResponse": {
      "type": "object",
      "properties": {
        "invites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TeamInviteDocument"
          }
        }
      }
    },
    "ProjectInviteDocument": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier for the invite"
        },
        "_rev": {
          "type": "string",
          "description": "CouchDB revision identifier"
        },
        "projectId": {
          "type": "string",
          "description": "Project/notebook identifier"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Email address of the invitee"
        },
        "role": {
          "type": "string",
          "description": "Role to be assigned to the user"
        },
        "invitedBy": {
          "type": "string",
          "description": "User ID who created the invite"
        },
        "createdAt": {
          "type": "number",
          "description": "Unix timestamp when invite was created"
        },
        "expiresAt": {
          "type": "number",
          "description": "Unix timestamp when invite expires"
        },
        "status": {
          "type": "string",
          "enum": ["pending", "accepted", "expired", "revoked"],
          "description": "Status of the invite"
        }
      },
      "required": ["_id", "projectId", "email", "role", "invitedBy", "createdAt", "status"]
    },
    "TeamInviteDocument": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier for the invite"
        },
        "_rev": {
          "type": "string",
          "description": "CouchDB revision identifier"
        },
        "teamId": {
          "type": "string",
          "description": "Team identifier"
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "Email address of the invitee"
        },
        "role": {
          "type": "string",
          "description": "Role to be assigned to the user in the team"
        },
        "invitedBy": {
          "type": "string",
          "description": "User ID who created the invite"
        },
        "createdAt": {
          "type": "number",
          "description": "Unix timestamp when invite was created"
        },
        "expiresAt": {
          "type": "number",
          "description": "Unix timestamp when invite expires"
        },
        "status": {
          "type": "string",
          "enum": ["pending", "accepted", "expired", "revoked"],
          "description": "Status of the invite"
        }
      },
      "required": ["_id", "teamId", "email", "role", "invitedBy", "createdAt", "status"]
    },
    "PostCreateInviteInput": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "description": "Role to assign to the invited user"
        },
        "name": {
          "type": "string",
          "description": "Name/email of the person being invited"
        },
        "expiry": {
          "type": "number",
          "description": "Unix timestamp when invite expires (optional)"
        },
        "uses": {
          "type": "number",
          "description": "Number of times the invite can be used (optional)"
        }
      },
      "required": ["role", "name"]
    },
    "PostCreateProjectInviteResponse": {
      "$ref": "#/definitions/ProjectInviteDocument"
    },
    "PostCreateTeamInviteResponse": {
      "$ref": "#/definitions/TeamInviteDocument"
    },
    "GetLongLivedTokensResponse": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LongLivedTokenDocument"
          }
        }
      }
    },
    "PostCreateLongLivedTokenRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "description": "Name/description for the token"
        },
        "expiresAt": {
          "type": "number",
          "description": "Unix timestamp when token expires (optional)"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Scopes/permissions for the token (optional)"
        }
      },
      "required": ["name"]
    },
    "PostCreateLongLivedTokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "The generated token string"
        },
        "tokenDoc": {
          "$ref": "#/definitions/LongLivedTokenDocument"
        }
      },
      "required": ["token", "tokenDoc"]
    },
    "LongLivedTokenDocument": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier for the token"
        },
        "_rev": {
          "type": "string",
          "description": "CouchDB revision identifier"
        },
        "name": {
          "type": "string",
          "description": "Name/description of the token"
        },
        "userId": {
          "type": "string",
          "description": "User ID who owns the token"
        },
        "createdAt": {
          "type": "number",
          "description": "Unix timestamp when token was created"
        },
        "expiresAt": {
          "type": "number",
          "description": "Unix timestamp when token expires"
        },
        "lastUsed": {
          "type": "number",
          "description": "Unix timestamp when token was last used"
        },
        "isActive": {
          "type": "boolean",
          "description": "Whether the token is currently active"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Scopes/permissions associated with the token"
        }
      },
      "required": ["_id", "name", "userId", "createdAt", "isActive"]
    },
    "PostRefreshTokenInput": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string",
          "description": "The refresh token to exchange for a new access token"
        }
      },
      "required": ["refreshToken"]
    },
    "PostRefreshTokenResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "description": "New JWT access token"
        },
        "refreshToken": {
          "type": "string",
          "description": "New refresh token"
        },
        "expiresIn": {
          "type": "number",
          "description": "Token expiration time in seconds"
        }
      },
      "required": ["accessToken", "refreshToken", "expiresIn"]
    },
    "PostExchangeTokenInput": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Token to exchange (e.g., OAuth token, invite token)"
        },
        "tokenType": {
          "type": "string",
          "enum": ["oauth", "invite", "long-lived"],
          "description": "Type of token being exchanged"
        }
      },
      "required": ["token"]
    },
    "PostExchangeTokenResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "description": "JWT access token"
        },
        "refreshToken": {
          "type": "string",
          "description": "Refresh token for obtaining new access tokens"
        },
        "expiresIn": {
          "type": "number",
          "description": "Token expiration time in seconds"
        },
        "user": {
          "type": "object",
          "description": "User information",
          "properties": {
            "user_id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          }
        }
      },
      "required": ["accessToken", "refreshToken", "expiresIn"]
    }
  }
}
